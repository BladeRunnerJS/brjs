
apply plugin: 'java'
apply plugin: 'retrolambda'
apply plugin: com.caplin.gradle.plugins.CompileOnly

buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath dependency('gradle-retrolambda')
	}
}

retrolambda {
	javaVersion JavaVersion.VERSION_1_7
}
project.afterEvaluate {
	compileTestJava.dependsOn compileRetrolambdaMain
}

sourceSets {
	test {
		java {
			srcDirs = ["src/test/java", "src/test-integration/java"]
		}
		resources {
			srcDirs = ["src/test/resources", "src/test-integration/resources"]
		}
	}
}

configurations {
	javadocs
	srcJar
}

dependencies {
	retrolambdaConfig dependency('retrolambda')
	
	compile project(":brjs-servlet")
	compile project(":brjs-logger")
	compile dependency('commons-io')
	compile dependency('commons-lang3')
	compile dependency('slf4j-api')
	compile dependency('gson')
	compile dependency('yamlbeans')
	compile dependency('validation-api')
	compile dependency('bval-jsr303')
	compile dependency('jsap')
	compile dependency('jetty-all-server')
	compile dependency('jta')
	compile dependency('closure-compiler')
	compile dependency('java-xmlbuilder')
	compile dependency('sjsxp')
	compile dependency('dom4j')
	compile dependency('utils')
	compile dependency('jericho-html')
	compile dependency('xalan')
	
	/* woodstox deps */
	compile dependency('woodstox-core-asl')
	compile dependency('stax2-api')
	compile dependency('msv-core')
	compile dependency('trang')
	
	/* dependencies for the spec test framework */
	compile dependency('junit')
	compile dependency('mockito-core')
	compile dependency('fluent-hc')
	compile dependency('httpclient')
	compile dependency('hamcrest-all')
	
	compileOnly dependency('servlet-api')
	
	testRuntime project(path: ':brjs-logger-binding')
	testRuntime dependency('jetty-jsp')
}

javadoc {
	title = "BladeRunnerJS ${buildVersion}"
	classpath += project.configurations.compileOnly
	/* info for JavaDoc options http://docs.oracle.com/javase/6/docs/technotes/tools/windows/javadoc.html#overviewcomment */
	options.overview = "${sourceSets.main.java.srcDirs.toArray()[0]}/overview-summary.html"
	maxMemory = "128m"
	executable = "$System.env.JAVA8_HOME/bin/javadoc"
}

task javadocZip, type:Zip, dependsOn:javadoc, {
	from javadoc.outputs.files.singleFile
	into "javadoc"
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

artifacts {
	javadocs javadocZip
	srcJar sourcesJar
}

task zipJsDocResources, type:Zip, dependsOn: processResources, {
	from "jsdoc-resources"
	archiveName "jsdoc-resources.zip"
	destinationDir = file("${sourceSets.main.output.resourcesDir}/org/bladerunnerjs/core/plugin/command/standard/")
}
classes.dependsOn zipJsDocResources
