package com.caplin.cutlass.command.export;

import java.io.File;
import java.io.IOException;
import java.util.List;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.filefilter.AndFileFilter;
import org.apache.commons.io.filefilter.IOFileFilter;
import org.apache.commons.io.filefilter.NotFileFilter;
import org.apache.commons.io.filefilter.PrefixFileFilter;
import org.apache.commons.io.filefilter.SuffixFileFilter;

import com.caplin.cutlass.EncodingAccessor;
import com.caplin.cutlass.command.LegacyCommandPlugin;
import org.bladerunnerjs.core.console.ConsoleWriter;
import org.bladerunnerjs.model.exception.command.CommandOperationException;
import org.bladerunnerjs.model.exception.command.CommandArgumentsException;
import org.bladerunnerjs.model.utility.FileUtility;
import org.bladerunnerjs.model.App;
import org.bladerunnerjs.model.BRJS;
import com.caplin.cutlass.BRJSAccessor;
import org.bladerunnerjs.model.JsLib;
import com.caplin.cutlass.structure.AppStructureVerifier;

public class ExportApplicationCommand implements LegacyCommandPlugin
{
	private final File sdkBaseDir;
	private final String DISCLAIMER = "Do not edit this file; edits will be lost after upgrades.";
	private ConsoleWriter out;
	
	public ExportApplicationCommand(File sdkBaseDir)
	{
		this.sdkBaseDir = sdkBaseDir;
		out = BRJSAccessor.root.getConsoleWriter();
	}
	
	@Override
	public void setBRJS(BRJS brjs)
	{	
	}
	
	@Override
	public String getCommandName()
	{
		return "export-app";
	}
	
	@Override
	public String getCommandDescription()
	{
		return "Create an importable zip for a given application";
	}
	
	@Override
	public String getCommandUsage()
	{
		return "<app-name> <disclaimer>";
	}

	@Override
	public String getCommandHelp() {
		return getCommandUsage();
	}
	
	@Override
	public void doCommand(String[] args) throws CommandArgumentsException, CommandOperationException
	{
		assertValidArgs(args);
				
		String applicationName = args[0];
		File destinationZipLocation = new File(sdkBaseDir, applicationName + ".zip");
		
		String disclaimer = "/*\n* " + ((args.length == 2) ? args[1] : DISCLAIMER) + "\n*/\n\n";
		
		try 
		{
			File existingAppDir = getApplicationDir(applicationName);
			
			File temporaryDirectoryForMotif = FileUtility.createTemporaryDirectoryWithSpecifiedFolderName(applicationName);			
			
			IOFileFilter excludeUserLibraryTestsFilter = createExcludeUserLibsTestsFilter(applicationName);
			IOFileFilter excludeDirFilter = new ExcludeDirFileFilter("js-test-driver", "bundles");
			IOFileFilter excludeJarFilter = new NotFileFilter(new AndFileFilter(new PrefixFileFilter("brjs-"),new SuffixFileFilter(".jar")));
			IOFileFilter filter = new AndFileFilter(excludeDirFilter, excludeJarFilter);
			filter = new AndFileFilter(filter, excludeUserLibraryTestsFilter);
			
			FileUtility.createResourcesFromSdkTemplate(existingAppDir, temporaryDirectoryForMotif, filter);
			includeDisclaimerInDirectoryClasses(new File(temporaryDirectoryForMotif, "libs"), disclaimer);
			FileUtility.zipFolder(temporaryDirectoryForMotif, destinationZipLocation, false);
		}
		catch (Exception e)
		{
			throw new CommandOperationException("Could not create application zip for application '" + applicationName + "'", e);  
		}

		out.println("Successfully exported application '" + applicationName + "'");
		out.println(" " + destinationZipLocation.getAbsolutePath());
	}

	private IOFileFilter createExcludeUserLibsTestsFilter(String applicationName) {
		List<JsLib> allJsLibs = BRJSAccessor.root.app(applicationName).jsLibs();
		IOFileFilter excludeDirFilter = new ExcludeDirFileFilter("");
		
		for (JsLib jsLib : allJsLibs)
		{
			if (jsLib.parentNode() instanceof App)
			{
				excludeDirFilter = new AndFileFilter (excludeDirFilter, new ExcludeDirFileFilter(jsLib.getName(), "test"));
			}
		}
		
		return excludeDirFilter;
	}

	private File getApplicationDir(String applicationName) throws CommandArgumentsException 
	{
		File appDir = AppStructureVerifier.getApplicationDirFileObject(sdkBaseDir, applicationName);
		
		if(appDir.exists() == false)
		{
			throw new CommandArgumentsException("Could not find application '" + applicationName + "'", this);
		}
		
		return appDir;
	}
	
	private void assertValidArgs(String[] args) throws CommandArgumentsException
	{
		if (args.length == 0)
		{
			throw new CommandArgumentsException("Please provide an application name.", this);
		}
		else if (args.length > 2)
		{
			throw new CommandArgumentsException("Too many arguments provided.", this);
		}
	}
	
	private void includeDisclaimerInDirectoryClasses(File dir, String disclaimer) throws IOException {
		String[] extensions = {"js"};
		
		if (dir.exists())
		{
			for (File file : FileUtils.listFiles(dir, extensions, true))
			{
				includeDisclaimer(file, disclaimer);
			}
		}
	}

	private void includeDisclaimer(File file, String disclaimer) throws IOException {
		String fileContent = FileUtils.readFileToString(file, EncodingAccessor.getDefaultOutputEncoding());
	
		FileUtils.writeStringToFile(file, disclaimer + fileContent, EncodingAccessor.getDefaultOutputEncoding());
	}
}
