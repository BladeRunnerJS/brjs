import static org.bladerunnerjs.BuildVersionCalculator.*

apply from: 'wrapper.gradle'

allprojects {
	def projectContainingSharedLogic = (project.parent) ? project.parent : project
	apply from: projectContainingSharedLogic.file('dependencies.gradle')
	
	apply plugin: 'eclipse'
	apply plugin: 'idea'
	apply plugin: 'base'
	
	repositories {
		mavenCentral()
		maven { url "http://bladerunnerjs.github.io/brjs-build-dependencies/repo" }
	}
	
	buildscript {
    	repositories {
    		mavenCentral()
    	}
	}
		
	tasks.withType(Copy) {
		fileMode = 0755
		includeEmptyDirs = false
	}
	tasks.withType(Sync) {
		fileMode = 0755
		includeEmptyDirs = false
	}
	tasks.withType(Zip) {
		fileMode = 0755
		includeEmptyDirs = false
	}
	
}

def projectBuildVersion = org.bladerunnerjs.BuildVersionCalculator.calculateVersion(project)
def projectBuildDate = org.bladerunnerjs.BuildVersionCalculator.calculateBuildDate(project)
def projectBuildHostname = org.bladerunnerjs.BuildVersionCalculator.calculateBuildHostname(project)

logger.info "Build version calculated as: ${projectBuildVersion}"
logger.info "Build date is: ${projectBuildDate}"
logger.info "Build hostname is: ${projectBuildHostname}"

subprojects { p ->
	
	ext {
		buildVersion = projectBuildVersion
		buildDate = projectBuildDate
		buildHostname = projectBuildHostname
	}
	
	version = projectBuildVersion
	group = 'org.bladerunnerjs'
		
	afterEvaluate { project ->
		
		if (project.plugins.hasPlugin(JavaPlugin)) {
			sourceCompatibility = '1.7'
			targetCompatibility = '1.7'
					
			project.tasks.withType(Test) { testTask ->
				test {
					testLogging {
						events 'skipped', 'failed'
						exceptionFormat 'full'
						info {
							displayGranularity = 0
						}
					}
				}
			}
			
			project.tasks.withType(JavaCompile) {
				options.compilerArgs += ['-Xlint:all']
				options.encoding = 'UTF-8'
			}
		}
	
	}
	
}


task runAllJavaTests << { throw new GradleException("runAllJavaTests has been renamed to testJava") }


task testJava {
	description "Runs 'test' for all Java projects."
}
subprojects {
	afterEvaluate { project ->
		project.tasks.withType(Test) { testTask ->
			testJava.dependsOn testTask
		}
	}
}

task cleanJava {
	description "Runs clean for all Java projects."
}
subprojects {
	afterEvaluate { project ->
		if (project.plugins.hasPlugin(JavaPlugin.class)) {
			cleanJava.dependsOn project.clean
		}
	}
}


task build {
	description "Builds and tests the distribution. Runs 'build' on all subprojects."
}
def parentBuildTask = build
subprojects {
	afterEvaluate { subProject ->
		parentBuildTask.dependsOn subProject.getTasksByName('build',false)
	}
}


task buildAndTestIE {
	description "Runs the 'build' task and also includes IE tests"
}
afterEvaluate { project ->
	buildAndTestIE.dependsOn build
	buildAndTestIE.dependsOn ':cutlass-sdk:testIE'
}


task buildAndTestIE_NoSysApps {
	description "Runs the 'build' task and also includes IE tests, ignoring the IE tests for systems apps"
}
afterEvaluate { project ->
    buildAndTestIE_NoSysApps.dependsOn build
    buildAndTestIE_NoSysApps.dependsOn ':cutlass-sdk:testJsIE'
}


def getProperty = { project, property ->
	if (!project.hasProperty(property)) {
		throw new GradleException("${property} property must be set")
	}
	return project.property(property)
}


def getGitHubToken = { project ->
	return getProperty(project,"githubToken")
}

def getReleaseNoteJson = { project, tagVersion ->
	def releaseDataFile = file("releases/${tagVersion}.json")
	def releaseNoteJson = new groovy.json.JsonSlurper().parseText( releaseDataFile.text )
	return releaseNoteJson
}

import org.bladerunnerjs.github.*


task generateReleaseNotes, {
	def assembledReleaseNotesFile = file("${buildDir}/release-note.txt")
	inputs.property "projectBuildVersion", projectBuildVersion
	outputs.file assembledReleaseNotesFile
	doFirst {
    	def gitHubToken = getGitHubToken(project)
		def githubApi = new GitHubAPIBridge(project, "BladeRunnerJS", "brjs", gitHubToken)
    	def tagVersion = org.bladerunnerjs.BuildVersionCalculator.calculateMajorVersion(project)
		
		
		def releaseNoteFile = file("releases/${tagVersion}.md")
		def milestoneId = getReleaseNoteJson(project,tagVersion).milestone
		
		List<Issue> issues = githubApi.getClosedIssuesForMilestone(milestoneId);
		
		assembledReleaseNotesFile.parentFile.mkdirs()
		assembledReleaseNotesFile.createNewFile()
		assembledReleaseNotesFile.text = releaseNoteFile.text
		assembledReleaseNotesFile.text += "\n\n## Closed Issues ##\n"
		issues.each {
			assembledReleaseNotesFile.text += "   - ${it.toString()}\n"
		}
	}
}

task githubRelease, dependsOn:generateReleaseNotes, {
	doFirst {
    	def gitHubToken = getGitHubToken(project)
    	def githubApi = new GitHubAPIBridge(project, "BladeRunnerJS", "brjs", gitHubToken)
    	def tagVersion = org.bladerunnerjs.BuildVersionCalculator.calculateMajorVersion(project)
    	
		def releaseNoteFile = generateReleaseNotes.outputs.files.singleFile
    	Release release = githubApi.createReleaseForTag(tagVersion, getReleaseNoteJson(project,tagVersion), releaseNoteFile.text)
	}
}

