/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['appenders/dateFile.js']) {
  _$jscoverage['appenders/dateFile.js'] = [];
  _$jscoverage['appenders/dateFile.js'][1] = 0;
  _$jscoverage['appenders/dateFile.js'][2] = 0;
  _$jscoverage['appenders/dateFile.js'][10] = 0;
  _$jscoverage['appenders/dateFile.js'][11] = 0;
  _$jscoverage['appenders/dateFile.js'][12] = 0;
  _$jscoverage['appenders/dateFile.js'][23] = 0;
  _$jscoverage['appenders/dateFile.js'][24] = 0;
  _$jscoverage['appenders/dateFile.js'][26] = 0;
  _$jscoverage['appenders/dateFile.js'][31] = 0;
  _$jscoverage['appenders/dateFile.js'][33] = 0;
  _$jscoverage['appenders/dateFile.js'][34] = 0;
  _$jscoverage['appenders/dateFile.js'][39] = 0;
  _$jscoverage['appenders/dateFile.js'][40] = 0;
  _$jscoverage['appenders/dateFile.js'][42] = 0;
  _$jscoverage['appenders/dateFile.js'][43] = 0;
  _$jscoverage['appenders/dateFile.js'][46] = 0;
  _$jscoverage['appenders/dateFile.js'][47] = 0;
  _$jscoverage['appenders/dateFile.js'][50] = 0;
  _$jscoverage['appenders/dateFile.js'][51] = 0;
  _$jscoverage['appenders/dateFile.js'][54] = 0;
  _$jscoverage['appenders/dateFile.js'][57] = 0;
  _$jscoverage['appenders/dateFile.js'][58] = 0;
}
_$jscoverage['appenders/dateFile.js'][1]++;
"use strict";
_$jscoverage['appenders/dateFile.js'][2]++;
var streams = require("../streams"), layouts = require("../layouts"), path = require("path"), os = require("os"), eol = os.EOL || "\n", openFiles = [];
_$jscoverage['appenders/dateFile.js'][10]++;
process.on("exit", (function () {
  _$jscoverage['appenders/dateFile.js'][11]++;
  openFiles.forEach((function (file) {
  _$jscoverage['appenders/dateFile.js'][12]++;
  file.end();
}));
}));
_$jscoverage['appenders/dateFile.js'][23]++;
function appender(filename, pattern, alwaysIncludePattern, layout) {
  _$jscoverage['appenders/dateFile.js'][24]++;
  layout = layout || layouts.basicLayout;
  _$jscoverage['appenders/dateFile.js'][26]++;
  var logFile = new streams.DateRollingFileStream(filename, pattern, {alwaysIncludePattern: alwaysIncludePattern});
  _$jscoverage['appenders/dateFile.js'][31]++;
  openFiles.push(logFile);
  _$jscoverage['appenders/dateFile.js'][33]++;
  return (function (logEvent) {
  _$jscoverage['appenders/dateFile.js'][34]++;
  logFile.write(layout(logEvent) + eol, "utf8");
});
}
_$jscoverage['appenders/dateFile.js'][39]++;
function configure(config, options) {
  _$jscoverage['appenders/dateFile.js'][40]++;
  var layout;
  _$jscoverage['appenders/dateFile.js'][42]++;
  if (config.layout) {
    _$jscoverage['appenders/dateFile.js'][43]++;
    layout = layouts.layout(config.layout.type, config.layout);
  }
  _$jscoverage['appenders/dateFile.js'][46]++;
  if (! config.alwaysIncludePattern) {
    _$jscoverage['appenders/dateFile.js'][47]++;
    config.alwaysIncludePattern = false;
  }
  _$jscoverage['appenders/dateFile.js'][50]++;
  if (options && options.cwd && ! config.absolute) {
    _$jscoverage['appenders/dateFile.js'][51]++;
    config.filename = path.join(options.cwd, config.filename);
  }
  _$jscoverage['appenders/dateFile.js'][54]++;
  return appender(config.filename, config.pattern, config.alwaysIncludePattern, layout);
}
_$jscoverage['appenders/dateFile.js'][57]++;
exports.appender = appender;
_$jscoverage['appenders/dateFile.js'][58]++;
exports.configure = configure;
_$jscoverage['appenders/dateFile.js'].source = ["\"use strict\";","var streams = require('../streams')",", layouts = require('../layouts')",", path = require('path')",", os = require('os')",", eol = os.EOL || '\\n'",", openFiles = [];","","//close open files on process exit.","process.on('exit', function() {","  openFiles.forEach(function (file) {","    file.end();","  });","});","","/**"," * File appender that rolls files according to a date pattern."," * @filename base filename."," * @pattern the format that will be added to the end of filename when rolling,"," *          also used to check when to roll files - defaults to '.yyyy-MM-dd'"," * @layout layout function for log messages - defaults to basicLayout"," */","function appender(filename, pattern, alwaysIncludePattern, layout) {","  layout = layout || layouts.basicLayout;","","  var logFile = new streams.DateRollingFileStream(","    filename, ","    pattern, ","    { alwaysIncludePattern: alwaysIncludePattern }","  );","  openFiles.push(logFile);","  ","  return function(logEvent) {","    logFile.write(layout(logEvent) + eol, \"utf8\");","  };","","}","","function configure(config, options) {","  var layout;","  ","  if (config.layout) {","    layout = layouts.layout(config.layout.type, config.layout);","  }","  ","  if (!config.alwaysIncludePattern) {","    config.alwaysIncludePattern = false;","  }","  ","  if (options &amp;&amp; options.cwd &amp;&amp; !config.absolute) {","    config.filename = path.join(options.cwd, config.filename);","  }","","  return appender(config.filename, config.pattern, config.alwaysIncludePattern, layout);","}","","exports.appender = appender;","exports.configure = configure;"];
