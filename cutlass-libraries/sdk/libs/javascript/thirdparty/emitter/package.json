{
  "name": "emitter",
  "version": "0.0.1",
  "description": "An event emitter that supports dispatching based on types.",
  "homepage": "http://BladeRunnerJS.github.io/emitter",
  "license": "MIT",
  "devDependencies": {
    "jsdoc3": "git://github.com/jsdoc3/jsdoc.git",
    "jasmine-node": "1.11.x"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/BladeRunnerJS/emitter.git"
  },
  "main": "./lib/Emitter.js",
  "scripts": {
    "test": "jasmine-node --verbose spec",
    "doc": "jsdoc Emitter.js -d doc README.md"
  },
  "readme": "---\r\nlayout: main\r\npermalink: /index.html\r\ntitle: Emitter\r\n---\r\n\r\n<script type=\"text/javascript\" src=\"Emitter.js\"></script>\r\n\r\nEventEmitter\r\n============\r\n\r\n* This document is available nicely formatted [here](http://BladeRunnerJS.github.io/emitter).\r\n* Tests are [here](http://BladeRunnerJS.github.io/emitter/spec).\r\n* Source code is [here](https://github.com/BladeRunnerJS/emitter).\r\n* JSDoc for the Emitter mixin is [here](http://BladeRunnerJS.github.io/emitter/doc/Emitter.html).\r\n\r\nThe rendered form of this document includes the Emitter script so you can open\r\na console and try it immediately.\r\n\r\nMy two main inspirations in making this implementation were the events in [backbone](http://backbonejs.org/#Events),\r\nand the EventEmitter in [node](http://nodejs.org/docs/latest/api/all.html#all_class_events_eventemitter).\r\n\r\nIf we hadn't required the ability to pass 'context' into `on` and `off`, we probably would have gone with\r\n[LucidJS](http://robertwhurst.github.io/LucidJS/).  Not leaking memory is difficult enough when\r\nbuilding large applications; forcing people to keep extra objects around just so they can clean up after\r\nthemselves is ugly enough that it discourages people from doing something important.\r\n\r\nWhile I haven't come across this exact combination of focussed microlibrary combined with context,\r\nthe only unusual feature of this Emitter (and deliberately so) is that it allows you to listen to and\r\ndispatch objects rather than just strings.  Related to this is type based events, which I describe\r\nlater.\r\n\r\nMaking an Emitter\r\n-----------------\r\n\r\nWhile you can directly create a new Emitter, or use standard prototypical\r\ninheritance to inherit from it, usually you will want to mix the Emitter\r\nmethods in to your own classes or objects.\r\n\r\n```javascript\r\n\r\n\tfunction MyEmitter() {};\r\n\tEmitter.mixInto(MyEmitter);\r\n\r\n\tvar emitter = new MyEmitter();\r\n```\r\n\r\nStandard Emitter Features\r\n-------------------------\r\n\r\nThe big three methods are provided:\r\n\r\non:\r\n\r\n```javascript\r\n\r\n\t// Basic example:\r\n\r\n\temitter.on('some-event', function() {\r\n\t\t// By default, 'this' is set to emitter inside here.\r\n\t\t// you can change that by providing a context argument.\r\n\t});\r\n\r\n\t// Example using context:\r\n\r\n\tfunction MyObject() {}\r\n\tMyObject.prototype.onBoom = function() {\r\n\t\t// in this example, 'this' is set to 'obj'.\r\n\t};\r\n\r\n\tvar obj = new MyObject();\r\n\temitter.on('end-of-the-world', obj.onBoom, obj);\r\n```\r\n\r\nThe poorly (but commonly) named off:\r\n\r\n```javascript\r\n\r\n\t// clears all listeners registered on emitter.\r\n\temitter.off();\r\n\r\n\t// clears all listeners for 'some-event'.\r\n\temitter.off('some-event');\r\n\r\n\t// removes the listener added with\r\n\t//    emitter.on('some-event', callback);\r\n\temitter.off('some-event', callback);\r\n\r\n\t// removes the listener added with\r\n\t//    emitter.on('some-event', callback, context);\r\n\temitter.off('some-event', callback, context);\r\n\r\n\t// removes all listeners registered with a context of context.\r\n\temitter.off(null, null, context);\r\n\t// or\r\n\temitter.clearListeners(context);\r\n```\r\n\r\ntrigger (sometimes called emit or fire or notify):\r\n\r\n```javascript\r\n\r\n\t// All listeners registered for the 'end-of-the-world' event\r\n\t// will get called with alienSpacecraft as their first argument.\r\n\temitters.trigger('end-of-the-world', alienSpacecraft);\r\n```\r\n\r\nonce is another function that is commonly provided by Emitters:\r\n\r\n```javascript\r\n\r\n\t// Once behaves similarly to .on, but the listener is only\r\n\t// ever called once.\r\n\temitter.once('some-event', function() {\r\n\t\t// this function will only be called once.\r\n\t});\r\n\r\n\temitter.trigger('some-event');\r\n\temitter.trigger('some-event');\r\n```\r\n\r\nExtra Features\r\n-----------------\r\n\r\nThis Emitter provides two extra features.\r\n\r\n### MetaEvents\r\n\r\nThe emitter will also trigger special events that you can listen to in certain\r\ncircumstances. The event emitter in node does a similar thing, firing `newListener`\r\nand `removeListener` events at the appropriate time.\r\n\r\nThere are three meta events which are:\r\n\r\n* `Emitter.meta.AddListenerEvent`, triggered when a listener is added.\r\n* `Emitter.meta.RemoveListenerEvent`, triggered when a listener is removed.\r\n* `Emitter.meta.DeadEvent`, triggered when an event is fired but no listeners receive it.\r\n\r\n```javascript\r\n\r\n\t// In this example, I use an AddListenerEvent metaevent to\r\n\t// create 'sticky' events behaviour for the ready event.\r\n\r\n\tfunction Document() {\r\n\t\tthis.isReady = false;\r\n\r\n\t\tthis.on(Emitter.meta.AddListenerEvent, function(addEvent) {\r\n\t\t\tif (this.isReady) {\r\n\t\t\t\taddEvent.listener.call(addEvent.context);\r\n\t\t\t}\r\n\t\t}, this);\r\n\t}\r\n\tEmitter.mixInto(Document);\r\n\tDocument.prototype.makeReady = function() {\r\n\t\tthis.isReady = true;\r\n\t\tthis.trigger('ready');\r\n\t};\r\n\r\n\tvar doc = new Document();\r\n\r\n\tdoc.makeReady();\r\n\r\n\t// Even though makeReady was called before this 'on',\r\n\t// the listener will still be called.\r\n\r\n\tdoc.on('ready', function() {\r\n\t\tconsole.log('ready now');\r\n\t});\r\n```\r\n\r\n### Type Based Events\r\n\r\nThe Events themselves in normal usage are usually string identifiers and then a list of\r\narguments, almost like an algebraic data type - a tag and then a tuple of data items.  In an\r\nobject language like javascript, it seems more natural to dispatch event objects instead and\r\nlisten for them based on their type.\r\n\r\n```javascript\r\n\r\n\tfunction MouseEvent(x, y) {\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t}\r\n\r\n\temitter.on(MouseEvent, function(event) {\r\n\t\t// in here, event is the instance of MouseEvent that\r\n\t\t// we trigger the emitter with.\r\n\t});\r\n\r\n\temitter.trigger(new MouseEvent(100, 99));\r\n```\r\n\r\nIt obeys the Liskov Substitution Principle, so a listener will also get notified of\r\nevents that are subclasses of the event type it is registered for.\r\n\r\n```javascript\r\n\r\n\tfunction ClickEvent(button, x, y) {\r\n\t\tMouseEvent.call(this, x, y);\r\n\t\tthis.button = button;\r\n\t}\r\n\r\n\tClickEvent.prototype = Object.create(MouseEvent.prototype);\r\n\r\n\temitter.on(MouseEvent, function(event) {\r\n\t\t// in here, event is the instance of ClickEvent that\r\n\t\t// we trigger the emitter with.\r\n\t});\r\n\r\n\temitter.trigger(new ClickEvent(\"right\", 101, 100));\r\n```",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/BladeRunnerJS/emitter/issues"
  },
  "_id": "emitter@0.0.1",
  "dist": {
    "shasum": "a1e7deb32b9822c3574295492ddf9fa1caec94d5"
  },
  "_resolved": "git+https://github.com/BladeRunnerJS/emitter.git#95b58e3e77b87b9c4bc625934fcbe7cc1d624dcb",
  "_from": "emitter@git+https://github.com/BladeRunnerJS/emitter.git#gh-pages"
}
