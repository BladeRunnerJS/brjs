import org.apache.commons.lang3.StringUtils
import org.apache.tools.ant.filters.*

configurations {
	brjsRunner
	testRunner
	archives
	beautifier
	
	libsAndDocsZip
}

dependencies {
	brjsRunner project(path: ':brjs-runner')
	brjsRunner project(path: ':cutlass-tasks')
	
	testRunner project(path: ':js-test-driver-bundler-plugin', transitive : false)
	testRunner project(path: ':brjs-logger-binding')
	testRunner dependency('JsTestDriver')
	testRunner files('JsTestDriver.conf')
	
	beautifier project(path: ':cutlass-common')
}

buildscript {
	dependencies {
		classpath dependency('commons-lang3')
	}
}

ext {	
	brjsRunnerDependenciesDir = "${buildDir}/brjs-runner-deps"
	testRunnerDependenciesDir = "${buildDir}/testRunnerDependencies"
	tempSdkWorkingDir = "${buildDir}/tempSdk"
}

task copyBrjsRunnerDependencies, type:Sync, {
	from configurations.brjsRunner
	into brjsRunnerDependenciesDir
}

task copyTestRunnerDependencies, type:Sync, {
	from configurations.testRunner
	into testRunnerDependenciesDir
	rename 'js-test-driver-bundler-plugin-.*', 'js-test-driver-bundler-plugin.jar'
}

task copyTestRunnerConf, type:Copy, {
	from file("../conf")
	into file("conf")
	include "test-runner.conf"
	doLast {
		def confFile = file("conf/test-runner.conf")
		confFile.text = "## WARNING: do not change this file. The original lives in <branch-dir>/test-runner.conf ##\n\n" + confFile.text.replace("../sdk/libs/java/testRunner/JsTestDriver.jar", "../build/testRunnerDependencies/JsTestDriver.jar")
	}
}
copyTestRunnerConf.outputs.upToDateWhen { false }

/* function to create test tasks */
def createTestTask = { taskName, taskTestDir, taskTestType ->
	task taskName, type: com.caplin.gradle.tasks.RunJstdTests, {
		description = "Run ${testType} for ${testDir}"
		dependsOn = [project.parent.tasks['copyBrowsers'], copyBrjsRunnerDependencies, copyTestRunnerDependencies, copyTestRunnerConf]
		inputs.dir brjsRunnerDependenciesDir
		inputs.dir testRunnerDependenciesDir
		testDir = taskTestDir
		testArg = ""
		testType = taskTestType
		command = "runTests"
	}
}

// TODO: Hardcoded reference to caplin's core library location, we should attempt to use the BRJS model for getting this location
createTestTask "jsTestDriverUTs", "libs/javascript/caplin/test", "UTs"
createTestTask "jsTestDriverATs", "libs/javascript/caplin/test", "ATs"
createTestTask "jsTestDriverITs", "libs/javascript/caplin/test", "ITs"

createTestTask "caplinBrTests", "libs/javascript/thirdparty/caplin-br", "ALL"

/* tasks to run individual library tests for browsers that are prone to memory leaks etc */
task invidualLibraryTests, {}

// TODO: Hardcoded reference to caplin's core library location, we should attempt to use the BRJS model for getting this location
file("sdk/libs/javascript/caplin/test/caplin").listFiles().each { libDir ->
	if (libDir.isDirectory()) {
    	def taskName = "jsTestDriverTests${libDir.name.capitalize()}"
		// TODO: Hardcoded reference to caplin's core library location, we should attempt to use the BRJS model for getting this location
    	createTestTask taskName, "libs/javascript/caplin/test/caplin/${libDir.name}", ""
    	invidualLibraryTests.dependsOn taskName
	}
}

task test(dependsOn:[jsTestDriverUTs, jsTestDriverATs, caplinBrTests]) { }

task beautifyLibs, type:com.caplin.gradle.tasks.ProcessJsLibs, {
	dependsOn configurations.beautifier
	commentStripperClasspath = configurations.beautifier
	// TODO: Hardcoded reference to caplin's core library location, we should attempt to use the BRJS model for getting this location
	jsLibTargetDir = file("${tempSdkWorkingDir}/sdk/libs/javascript/caplin/src/")
	doLast {
		config('SDK_EXCLUDE_CAPLIN_LIBRARIES').each {
			// TODO: Hardcoded reference to caplin's core library location, we should attempt to use the BRJS model for getting this location
			delete file("${tempSdkWorkingDir}/sdk/libs/javascript/caplin/src/caplin/${it}")
		}
	}
}

/* dummy task used to check whether we are building the real jsdoc */
task buildJsDoc, { 
	description = "Outputs jsdoc to '${tempSdkWorkingDir}/sdk/docs/jsdoc'"
}
task jsDoc, type:com.caplin.gradle.tasks.JsDoc, {
	dependsOn = [beautifyLibs]
	jsDocsDir = file("${tempSdkWorkingDir}/sdk/docs/jsdoc")

	// TODO: Hardcoded reference to caplin's core library location, we should attempt to use the BRJS model for getting this location
	jsRootPathRelativeToJsDocDir = "../../libs/javascript/caplin/src"
	jsDocToolkitDir = file("jsdoc-toolkit")

	gradle.getTaskGraph().whenReady { graph ->
		createEmptyJsDoc = !graph.hasTask(buildJsDoc)
	}
}
buildJsDoc.dependsOn jsDoc


task distZip, type:Zip, {
	from (jsDoc) {
		into "docs/jsdoc"
		include("**/*html")
		/* only copy the *html files here so we can filter them - copy the rest of the stuff in the next bit */
		filter(ReplaceTokens, tokens: [
			buildVersion: buildVersion,
			buildDate: buildDate
		] )
	}
	from (jsDoc) {
		into "docs/jsdoc"
		exclude("**/*html")
	}
	from (beautifyLibs) {
		// TODO: Hardcoded reference to caplin's core library location, we should attempt to use the BRJS model for getting this location
		into 'libs/javascript/caplin/src/'
	}
	from ('sdk/libs/javascript/thirdparty') {
		config('SDK_EXCLUDE_THIRDPARTY_LIBRARIES').each {
			exclude "${it}/**/*"
		}
		into 'libs/javascript/thirdparty'
	}

	// TODO: Hardcoded reference to caplin's core library location, we should attempt to use the BRJS model for getting this location
	from ('sdk/libs/javascript/caplin/resources/') {
		into 'libs/javascript/caplin/resources/'
		config('SDK_EXCLUDE_CAPLIN_LIBRARIES').each {
			exclude "caplin/${it}"
		}
	}
	includeEmptyDirs = false
}

artifacts {
	libsAndDocsZip distZip
}

task check, { 
	dependsOn test
}

assemble {
	dependsOn = [distZip, copyBrjsRunnerDependencies, copyTestRunnerDependencies, parent.copyBrowsers, copyTestRunnerConf]
}

task build, { 
	dependsOn = [assemble, check]
}

clean {
	doFirst {
		delete "sdk/docs"
		delete "test-results"
		delete "conf/test-runner.conf"
		fileTree(dir:projectDir, include:"**/bundles/**/*.bundle").each { delete it }
	}
}

