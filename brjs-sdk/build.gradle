import org.apache.tools.ant.filters.*

apply plugin: 'maven'


configurations {
	system
	application
	systemAppServlets
	testRunner
	javadocs

	browsers_dep
}

dependencies {
	system project(path: ':cutlass-tasks')
	system project(path: ':brjs-runner')
	system project(path: ':brjs-logger')
	system project(":brjs-logger-binding")
	system dependency('selenium-java')
	system dependency('jetty-jsp')

	application project(path: ':brjs-servlet')

	javadocs project(path: ':brjs-core', configuration:'javadocs')

	systemAppServlets (project(path: ':system-app-servlets'))

	testRunner dependency('JsTestDriver')
	testRunner dependency('validation-api')
	testRunner dependency('sjsxp')

	testRunner project(path: ':brjs-logger')
	testRunner project(path: ':brjs-logger-binding')
	
	browsers_dep dependency('chrome')
	browsers_dep dependency('firefox')
	browsers_dep dependency('phantomjs')
}


def browserRootDir = buildDir.path+"/browsers"
def browserProfileDir = "${browserRootDir}/profile"
task copyBrowsers(type: Sync) {
	description "Copies all browser dependencies into " + relativePath(browserRootDir) + "."
	from { configurations.browsers_dep.collect { browser -> zipTree(browser) } }
	eachFile {
		it.path = it.path.replaceAll("-[0-9\\.]+/", "/") // strip the version string
		it.path = it.path.replaceAll("-[a-z0-9]+\\.[a-z0-9]+\\.[a-z0-9]+-", "-") // strip phantomjs version
	}
	into browserRootDir
	doLast {
		//TODO: this should probabaly be done in a task listener
		if (file(browserProfileDir).exists()) {
			delete browserProfileDir
		}
		file(browserProfileDir).mkdirs();
		file(browserProfileDir + "/chrome").mkdir();
			/* prevent chrome asking to set default search engine */
			file(browserProfileDir + "/chrome/First Run").createNewFile();
		file(browserProfileDir + "/chromium").mkdir();
			/* prevent chromium asking to set default search engine */
			file(browserProfileDir + "/chromium/First Run").createNewFile();
		file(browserProfileDir + "/firefox").mkdir();
			file(browserProfileDir + "/firefox/prefs.js").createNewFile();
			file(browserProfileDir + "/firefox/prefs.js").text = "user_pref(\"browser.shell.checkDefaultBrowser\", false);\nuser_pref(\"browser.sessionstore.max_resumed_crashes\", -1);\nuser_pref(\"toolkit.startup.max_resumed_crashes\", -1);\nuser_pref(\"toolkit.startup.recent_crashes\", -1);\n";
		}
}

task assembleSdk, type: Copy, dependsOn: [configurations.system, configurations.application, configurations.systemAppServlets, configurations.testRunner, configurations.javadocs], {	
	destinationDir projectDir
	inputs.property "buildVersion", buildVersion
	inputs.property "buildHostname", buildHostname
	from (configurations.system)
	{
		into "sdk/libs/java/system"
		rename { String fileName ->
		if ( !fileName.startsWith("brjs-") )
		{
			fileName = "brjs-"+fileName
		}
	}
	}
	from (configurations.javadocs.collect { zipTree(it) }) {
		eachFile {
			it.path = it.path.replaceFirst("(javadoc)/","")
		}
		into "sdk/docs/java"
	}
	from (configurations.application)
	{
		into "sdk/libs/java/application"
		rename { String fileName ->
    		if ( !fileName.startsWith("brjs-") )
    		{
    			fileName = "brjs-"+fileName
    		}
		}
	}
	def allApps = file("sdk/system-applications").listFiles() + file("apps").listFiles()
			allApps.each {
		if (it.isDirectory()) {
			into ("sdk/system-applications/${it.name}/WEB-INF/lib") {
				from configurations.systemAppServlets
				rename { String fileName ->
					if ( !fileName.startsWith("brjs-") )
					{
						fileName = "brjs-"+fileName
					}
				}
			}
		}
	}
	from (configurations.testRunner)
	{
		into "sdk/libs/java/testRunner"
		rename 'JsTestDriver-(.*).jar', 'JsTestDriver.jar'
	}

	doFirst {
		delete file("sdk/libs/java")
		delete file("sdk/phantomjs")
		delete file("sdk/docs")
		fileTree(dir:"sdk/system-applications", include:"*/WEB-INF/lib/brjs-*").each { delete it }
		fileTree(dir:"apps", include:"*/WEB-INF/lib/brjs-*").each { delete it }
	}
	doLast {
		file("sdk/version.txt").text =  "{"+
                            			"	Version: \"${buildVersion}\","+
                            			"	BuildDate: \"${buildDate}\","+
                            			"	DistType: \"bladerunnerjs\","+
                            			"	BuildHostname: \"${buildHostname}\""+
                            			"}"
        file("sdk/libs/java/testRunner/JsTestDriver.conf").text = "timeout: 90"
	}
}

def createTestTask = { taskName, taskTestDir, taskTestType, browser ->
	task taskName, type: com.caplin.gradle.tasks.RunJstdTests, dependsOn: assemble, {
		description = "Run ${taskTestType} for ${taskTestDir} using ${browser}"
		dependsOn = [assemble, copyBrowsers]
		inputs.dir file("apps/")
    	inputs.dir file("sdk/")
    	inputs.dir file("conf/")
		workingDir = "sdk"
		testType = taskTestType
		browsers = browser
		testDir = taskTestDir
	}
}

// "libs/javascript" is relative to the sdk directory
[ "Chrome", "Firefox", "IE", "PhantomJS" ].each {
	def testJsTask = createTestTask "testJs${it}", "libs/javascript", "ALL", it.toLowerCase()
	def testSystemAppsTask = createTestTask "testSystemApps${it}", "system-applications", "ALL", it.toLowerCase()
	task "test${it}", dependsOn: [testJsTask, testSystemAppsTask]
}

task test, dependsOn: testPhantomJS


task createSdkJsDocs, dependsOn: assembleSdk, {
	inputs.dir "sdk/libs/javascript"
    outputs.dir "sdk/docs/js"
	def jsDocTmpAppName = "jsdoc-tmp-app"
	doFirst {
		delete file("apps/${jsDocTmpAppName}")
		exec {
			commandLine org.bladerunnerjs.OSCalculator.getOSSpecificCommand("brjs") + ["create-app", jsDocTmpAppName]
			workingDir file("sdk")
		}
		exec {
			commandLine org.bladerunnerjs.OSCalculator.getOSSpecificCommand("brjs") + ["jsdoc", jsDocTmpAppName]
			workingDir file("sdk")
		}
		copy {
			from "generated/app/${jsDocTmpAppName}/jsdoc/"
			into "sdk/docs/js"
		}
	}
	doLast {
		delete file("apps/${jsDocTmpAppName}")
		file("sdk/docs/js/hosted-docs.css").text = ".regeneratedDocsBtn, .subnav, #topnav { display: none !important; }"
	}
}



assemble.dependsOn = [assembleSdk, copyBrowsers, createSdkJsDocs]

task check, dependsOn: test, {}
task build, dependsOn: check, {}


task downloadExampleApps, {
	outputs.dir file("${buildDir}/brjs-example-apps.zip")
	doFirst {
		if (!buildDir.isDirectory()) { buildDir.mkdir() }
		ant.get(src: "https://github.com/BladeRunnerJS/brjstodo-getting-started/archive/master.zip", dest: "${buildDir}/brjs-example-apps.zip")
	}
}

task extractExampleApps, type:Copy, dependsOn:downloadExampleApps, {
	from zipTree( tasks.downloadExampleApps.outputs.files.singleFile )
	into "apps/example-app-brjs-todo"   // Temporarily changing to explicit folder
	includeEmptyDirs = false
	eachFile {
		it.path = it.path.replaceFirst("[A-Za-z0-9-_]+/","")
		if (it.path.startsWith(".git")) { exclude it }
	}
}

createTestTask "exampleAppsTestJsChrome", "../apps/", "ALL", "chrome"
exampleAppsTestJsChrome.dependsOn extractExampleApps
createTestTask "exampleAppsTestJsFirefox", "../apps/", "ALL", "firefox"
exampleAppsTestJsFirefox.dependsOn extractExampleApps

task exampleAppsTestJs, dependsOn: [exampleAppsTestJsChrome, exampleAppsTestJsFirefox], {}

/*

TODO: add task to publish JS and Java docs

Steps:
- create the docs (done)
- clone the docs repo (brjs-api-docs?)
- copy over docs
 - suggested folder structure:
    /v0.x
      /js
	 	 /java
    /v0.y
			/js
			/java
- git push - using same API key used to create the release

Thoughts:
- can we do this all via the github API?
- can we use the API key?
- we might need a note about the automated deployment and how to raise an issue

*/



ext.explodedSdkDir = "${project.buildDir}/exploded"

task distZip, type:Zip, dependsOn: [assemble], {
	baseName = "BladeRunnerJS"
	from projectDir
	into "BladeRunnerJS/"
	include "sdk/**", "sdk/**", "apps/apps.txt", "LICENSE", "README.txt"
	exclude "**/.gitignore", "**/.p4ignore"
	exclude "**/libs/**/tests/*", "**/libs/javascript/*/test-*/*", "**/libs/**/src-test/*"
	exclude "**/system-applications/**/tests/*", "**/system-applications/*/test-*/*", "**/system-applications/**/src-test/*"
	exclude "**/bundles/*"
	exclude "**/libs/javascript/**node_modules/**", "**/*_NODIST/*"
	exclude "**/empty.txt"
}
build.dependsOn distZip
distZip.mustRunAfter test

gradle.taskGraph.whenReady { taskGraph ->
	if (taskGraph.hasTask(distZip)) {
		gradle.addBuildListener(new DistZipPathLogger(project.buildVersion, distZip.archivePath.getPath()))
	}
}


task explodeSdk, type:Sync, dependsOn: distZip, {
	from files(distZip).collect { zipTree(it) }
	into explodedSdkDir
}


task checkVersionTxt, dependsOn: explodeSdk, {
	doFirst {
		def versionFile = project.file("${explodedSdkDir}/BladeRunnerJS/sdk/version.txt");
		if (versionFile.text.contains("@"))
		{
			throw new GradleException("version.txt (${versionFile.getAbsolutePath()}) contains an unfiltered token.")
		}
	}
}
check.dependsOn checkVersionTxt


task checkSdkStructure, type:com.caplin.gradle.tasks.CheckDirectoryStructure, dependsOn: explodeSdk, {
	checkRoot = file("${explodedSdkDir}/BladeRunnerJS")
	expectedPaths = [
		"sdk/**",
		"sdk/brjs",
		"sdk/brjs.cmd",
		"sdk/version.txt",
		"sdk/libs/java/testRunner/*",
		"sdk/libs/java/system/*",
		"sdk/libs/java/application/**",
		"sdk/libs/javascript/*/src/**",
		"sdk/libs/javascript/*/resources/**",
		"sdk/system-applications/*/*",
		"sdk/system-applications/*/WEB-INF/lib/*",
		"sdk/templates/default/*/*",
		"sdk/templates/default/*/tests/*",
        "sdk/docs/java/*",
		"sdk/docs/java/**/*",
		"sdk/docs/js/*",
		"sdk/docs/js/**/*",
		"sdk/jsdoc-toolkit-resources/**",
		"sdk/jsdoc-toolkit-resources/jsdoc-toolkit/node_modules/**",
		"README.txt",
		"LICENSE",
		"apps/apps.txt"
	]
	bannedPaths = [
	   "**/build/**",
	   "**/.p4ignore",
	   "**/.gitignore",
	   "**/empty.txt",
	   "**/system-applications/dashboard/WEB-INF/lib/*xom-*",
	   "**/libs/java/application/xom-*",
	   "**/libs/java/application/*bladerunner.jar",
	   "**/libs/java/application/servlet-api-*",
	   "**/libs/java/system/bladerunner-*-servlets*",
	   "**/js-test-driver/bundles/**/*",
	   "**/libs/**/tests/**/*",
	   "**/system-applications/**/tests/**/*",
	   "**/system-applications/*/test-*/**/*",
	   "**/system-applications/**/src-test/**/*",
	   "*/sdk/libs/javascript/**/tests/**",
	   "*/sdk/libs/javascript/*/test-*/**/*",
	   "*/sdk/libs/javascript/**/src-test/**",
	   "*/sdk/libs/javascript/thirdparty/**",
	   "*/sdk/libs/javascript/br-libs/**",
	   "*/sdk/run*",
	   "*/sdk/libs/**/node_modules/**",
	   "*/apps/*/*",
	   "**/*_NODIST/**"
	]
}
check.dependsOn checkSdkStructure


task cleanTemporaryFiles {
	outputs.upToDateWhen { false }
	doFirst {
		ant.delete(includeemptydirs: 'true') {
			fileset(dir: projectDir) {
				include(name: 'brjs.conf')
				include(name: '**/test-*/**/bundles/')
				include(name: '**/WEB-INF/lib/brjs-*.jar')
			}
		}
	}
}
clean {
	dependsOn = [cleanTemporaryFiles]
}


// util class
class DistZipPathLogger extends BuildAdapter {
	String buildVersion
	String archivePath
	public DistZipPathLogger(String buildVersion, String archivePath) {
		this.buildVersion = buildVersion
		this.archivePath = archivePath
	}
	void buildFinished(BuildResult result) {
		if (!result.failure) {
    		println ""
    		println "----"
    		println "BladeRunnerJS ${buildVersion} built and zipped to ${archivePath}"
    		println "----"
    		println ""
		}
	}
}
