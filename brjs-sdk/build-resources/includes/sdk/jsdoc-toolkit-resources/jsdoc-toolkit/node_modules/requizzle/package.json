{
  "name": "requizzle",
  "version": "0.2.0",
  "description": "Swizzle a little something into your require() calls.",
  "main": "index.js",
  "scripts": {
    "test": "gulp test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/hegemonic/requizzle.git"
  },
  "keywords": [
    "module",
    "modules",
    "require",
    "inject",
    "dependency",
    "swizzle"
  ],
  "author": {
    "name": "Jeff Williams",
    "email": "jeffrey.l.williams@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/hegemonic/requizzle/issues"
  },
  "homepage": "https://github.com/hegemonic/requizzle",
  "devDependencies": {
    "expectations": "~0.2.5",
    "gulp": "~3.8.0",
    "gulp-eslint": "~0.1.6",
    "gulp-istanbul": "~0.2.0",
    "gulp-istanbul-enforcer": "~1.0.2",
    "gulp-mocha": "~0.4.1"
  },
  "dependencies": {
    "underscore": "~1.6.0"
  },
  "readme": "# Requizzle #\n\nSwizzle a little something into your Node.js modules.\n\n\n## What's Requizzle? ##\n\nRequizzle provides a drop-in replacement for Node.js's `require()` function. This replacement\nallows you to change a module's source code at runtime.\n\nYou can use Requizzle in your test cases, or in production code if you like to live dangerously.\nRequizzle has been tested with Node.js 0.10 and 0.11.\n\n\n## How can I change a module with Requizzle? ##\n\nThere are several different ways:\n\n### Look for modules in new places ###\n\nWith Requizzle, you can add directories to the module lookup path, which forces Node.js to search\nthose directories for modules. This can be useful if:\n\n+ You're tired of writing code like `require('../../../../../lib/foo')`.\n+ You want to expose your app's modules to external plugins. (Without Requizzle, it can be tough to\ndo this if the plugin is located outside of your app directory.)\n\n### Add code before or after the module's source code ###\n\nTamper with modules to your heart's delight by adding arbitrary code before or after the module's\nown source code.\n\n### Mess with child modules ###\n\nWhen you use Requizzle to require a module, you can force each child module's `require` method to\ninherit your changes to the parent module. (By default, only the parent module is changed.)\n\n\n## Will Requizzle break my dependencies? ##\n\nProbably not. It's true that Requizzle gives you plenty of new and exciting ways to tamper with, and\npossibly break, your module dependencies. But Requizzle also tries not to break anything on its own.\nIn particular:\n\n+ **Requizzle preserves strict-mode declarations**.  If a module starts with a strict-mode\ndeclaration, Requizzle keeps it in place. Your changes will appear after the strict-mode\ndeclaration.\n+ **Requizzle leaves native modules alone**. If you use Requizzle to load one of Node.js's built-in\nmodules, such as `fs` or `path`, Requizzle won't mess with it.\n\n\n## Installation ##\n\nWith npm:\n\n    npm install requizzle\n\nWith git:\n\n    git clone git://github.com/hegemonic/requizzle.git\n    cd requizzle\n    npm install\n\n\n## Usage ##\n\nThe Requizzle module exports a single function, which returns a drop-in replacement for\n`require()`.\n\nWhen you call the function, you must pass in an `options` object, which can include any of these\nproperties:\n\n+ `extras`: A pair of functions that return text to insert before or after the module's source code.\nEach function accepts two parameters: `targetPath`, the path to the required module, and\n`parentModule`, the `Module` object for the module's parent. Each function must return a string.\n    + `extras.before`: A function that returns text to insert before the module's source code.\n    + `extras.after`: A function that returns text to insert after the module's source code.\n+ `infect`: Determines whether child modules are infected with the same changes as the parent\nmodule. Set to `true` to force child modules to inherit your changes. Defaults to `false`.\n+ `requirePaths`: Additional paths to search for required modules. For example, if `requirePaths` is\nset to `['/usr/lib/junk/modules']`, and you save a JavaScript module at\n`/usr/lib/junk/modules/mymodule.js`, you can require the module as `mymodule`.\n\n    You can provide an array of paths, which will be searched before the default module paths, or an\n    object with the following properties:\n\n    + `requirePaths.before`: An array of paths to search before the default module paths.\n    + `requirePaths.after`: An array of paths to search after the default module paths. Use this\n    property if you want the module to use its own local dependencies when possible, then fall back\n    to the additional paths if necessary.\n\n    By default, the require path is not changed.\n\n\n## Examples ##\n\n```js\nvar requizzle = require('requizzle');\n\n// Say hello and goodbye to each module.\nvar logRequire = requizzle({\n    extras: {\n        before: function(targetPath, parentModule) {\n            return 'console.log(\"Hello %s!\", ' + targetPath + ');\\n';\n        },\n        after: function(targetPath, parentModule) {\n            return 'console.log(\"Goodbye %s!\", ' + targetPath + ');\\n';\n        }\n    }\n});\n// Prints \"Hello /path/to/mymodule.js!\" and \"Goodbye /path/to/mymodule.js!\"\nvar myModule = logRequire('mymodule');\n\n// Look for modules in the current module's `lib` directory, and force child\n// modules to do the same.\nvar path = require('path');\nvar extraPathRequire = requizzle({\n    infect: true,\n    requirePaths: [path.join(__dirname, 'lib')]\n});\n// If `foo` needs to require a module in `./lib`, it can use `require('bar')`\n// instead of `require('./lib/bar')`.\nvar foo = extraPathRequire('./foo');\n```\n\n\n## Troubleshooting ##\n\nHere are some problems you may run into when you use Requizzle, along with solutions to each\nproblem. If you run into any problems that aren't addressed here, please file a new issue!\n\n### Requizzle slowed down my code! A lot! ###\n\nRequizzle adds minimal overhead to the module-loading process. However, your code will run _much_\nslower than usual if you do both of the following:\n\n+ Use Requizzle's `infect` option.\n+ Require modules that have a lot of `require()` calls within the scope of individual functions.\n\nIf Requizzle seems to slow down your app, look for module calls that are within function scope, then\nmove them to each module's top-level scope. You can find the biggest offenders by using Node.js's\nbuilt-in `--prof` option to profile your app, then running [node-tick][] to create a report that\nshows the number of ticks per function.\n\n[node-tick]: https://github.com/sidorares/node-tick\n\n### Requizzle made my module do something weird! ###\n\nDo you have any [circular dependencies][circular] in the modules that aren't working? Circular\ndependencies can cause unusual behavior with Requizzle, just as they can without Requizzle. Try\nbreaking the circular dependency.\n\n[circular]: http://nodejs.org/api/modules.html#modules_cycles\n\n### Requizzle violates the [Law of Demeter][demeter]! It's an unnatural abomination! ###\n\nFair enough.\n\n[demeter]: http://en.wikipedia.org/wiki/Law_of_Demeter\n\n\n## Changelog ##\n\n+ 0.2.0 (June 2014): The `requirePaths` option can now contain `before` and `after` properties.\nPaths in the `before` property will be searched first; paths in the `after` property will be\nsearched last.\n+ 0.1.1 (June 2014): If the `requirePaths` option is used, the module loader now searches the extra\npaths first rather than last.\n+ 0.1.0 (June 2014): Initial release.\n\n## Acknowledgements ##\n\nRequizzle is very loosely adapted from Johannes Ewald's [rewire](https://github.com/jhnns/rewire)\nmodule, which is designed to modify a module's behavior for unit testing. If Requizzle doesn't meet\nyour needs, please take a look at rewire!\n\n\n## License ##\n\n[MIT license](LICENSE).\n",
  "readmeFilename": "README.md",
  "_id": "requizzle@0.2.0",
  "_shasum": "ea93c7b441ce168052391860b55a7b508c391cbd",
  "_from": "requizzle@~0.2.0",
  "_resolved": "https://registry.npmjs.org/requizzle/-/requizzle-0.2.0.tgz"
}
