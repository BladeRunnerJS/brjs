{
  "name": "istanbul",
  "version": "0.2.16",
  "description": "Yet another JS code coverage tool that computes statement, line, function and branch coverage with module loader hooks to transparently add coverage when running tests. Supports all JS coverage use cases including unit tests, server side functional tests and browser tests. Built for scale",
  "keywords": [
    "coverage",
    "code coverage",
    "JS code coverage",
    "JS coverage"
  ],
  "author": {
    "name": "Krishnan Anantheswaran",
    "email": "kananthmail-github@yahoo.com"
  },
  "contributors": [
    {
      "name": "Reid Burke",
      "email": "me@reidburke.com"
    },
    {
      "name": "Martin Cooper",
      "email": "mfncooper@gmail.com"
    },
    {
      "name": "Dav Glass",
      "email": "davglass@gmail.com"
    },
    {
      "name": "nowamasa",
      "email": "nowamasa@gmail.com"
    },
    {
      "name": "Miller Medeiros",
      "email": "contact@millermedeiros.com"
    },
    {
      "name": "Daniel Perez Alvarez",
      "email": "unindented@gmail.com"
    },
    {
      "name": "Mathias Bynens",
      "email": "mathias@qiwi.be"
    },
    {
      "name": "Nathan Brown",
      "email": "nate@betable.com"
    },
    {
      "name": "Brian Ng",
      "email": "bng412@gmail.com"
    },
    {
      "name": "John Morrison @jrgm"
    },
    {
      "name": "Tomaz Muraus",
      "email": "tomaz+github@tomaz.me"
    },
    {
      "name": "Joe @jhansche",
      "email": "jhansche@meetme.com"
    },
    {
      "name": "Vojta Jina",
      "email": "vojta.jina@gmail.com"
    },
    {
      "name": "Dmitry Shirokov @runk",
      "email": "deadrunk@gmail.com"
    },
    {
      "name": "Chris Gladd @chrisgladd"
    },
    {
      "name": "Sergey Belov",
      "email": "peimei@ya.ru"
    },
    {
      "name": "porneL",
      "email": "pornel@pornel.net"
    },
    {
      "name": "@asifrc"
    },
    {
      "name": "Gergely Nemeth @gergelyke"
    },
    {
      "name": "@bixdeng"
    },
    {
      "name": "@mpderbec"
    },
    {
      "name": "@jxiaodev"
    },
    {
      "name": "Arpad Borsos @Swatinem",
      "email": "arpad.borsos@googlemail.com"
    },
    {
      "name": "Ariya Hidayat @ariya"
    },
    {
      "name": "@markyen"
    },
    {
      "name": "Sam Saccone @samccone",
      "email": "sam@samx.it"
    },
    {
      "name": "Jason Cheatham @jason0x43"
    },
    {
      "name": "@smikes"
    },
    {
      "name": "Yasyf Mohamedali @yasyf",
      "email": "yasyfm@gmail.com"
    }
  ],
  "preferGlobal": true,
  "scripts": {
    "pretest": "jshint index.js lib/ test/",
    "test": "test/run.js",
    "posttest": "node ./lib/cli.js check-coverage --statements 95 --branches 80",
    "docs": "npm install yuidocjs && node node_modules/yuidocjs/lib/cli.js ."
  },
  "bin": {
    "istanbul": "./lib/cli.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/gotwarlost/istanbul.git"
  },
  "dependencies": {
    "esprima": "1.2.x",
    "escodegen": "1.3.x",
    "handlebars": "1.3.x",
    "mkdirp": "0.5.x",
    "nopt": "3.x",
    "fileset": "0.1.x",
    "which": "1.0.x",
    "async": "0.9.x",
    "abbrev": "1.0.x",
    "wordwrap": "0.0.x",
    "resolve": "0.7.x",
    "js-yaml": "3.x"
  },
  "devDependencies": {
    "rimraf": "2.2.x",
    "nodeunit": "0.9.x",
    "jshint": "2.5.x",
    "requirejs": "2.x",
    "coveralls": "2.x"
  },
  "jshintConfig": {
    "bitwise": true,
    "camelcase": false,
    "curly": true,
    "eqeqeq": true,
    "forin": true,
    "freeze": true,
    "immed": true,
    "latedef": true,
    "maxlen": 150,
    "newcap": true,
    "noarg": true,
    "nonbsp": true,
    "nonew": true,
    "plusplus": true,
    "trailing": true,
    "undef": true,
    "unused": true,
    "strict": false,
    "asi": false,
    "boss": false,
    "debug": false,
    "eqnull": false,
    "esnext": false,
    "evil": false,
    "expr": false,
    "funcscope": false,
    "globalstrict": false,
    "iterator": false,
    "lastsemic": false,
    "laxbreak": true,
    "laxcomma": false,
    "loopfunc": false,
    "multistr": false,
    "notypeof": false,
    "proto": false,
    "scripturl": false,
    "smarttabs": false,
    "shadow": false,
    "sub": false,
    "supernew": false,
    "validthis": false,
    "noyield": false,
    "browser": true,
    "node": true,
    "nomen": false,
    "onevar": true,
    "passfail": false,
    "white": false
  },
  "readme": "Istanbul - a JS code coverage tool written in JS\n================================================\n\n[![Build Status](https://secure.travis-ci.org/gotwarlost/istanbul.png)](http://travis-ci.org/gotwarlost/istanbul)\n[![Dependency Status](https://gemnasium.com/gotwarlost/istanbul.png)](https://gemnasium.com/gotwarlost/istanbul)\n[![Coverage Status](https://img.shields.io/coveralls/gotwarlost/istanbul.svg)](https://coveralls.io/r/gotwarlost/istanbul?branch=master)\n\n[![NPM](https://nodei.co/npm/istanbul.png?downloads=true)](https://nodei.co/npm/istanbul/)\n\nFeatures\n--------\n\n* All-javascript instrumentation library that tracks **statement, branch,\nand function coverage** and reverse-engineers **line coverage** with 100% fidelity.\n* **Module loader hooks** to instrument code on the fly\n* **Command line tools** to run node unit tests \"with coverage turned on\" and no cooperation\nwhatsoever from the test runner\n* **HTML**, **LCOV**, **Cobertura**, **TeamCity**, and **Clover** reporting.\n* Ability to use as **middleware** when serving JS files that need to be tested on the browser.\n* Can be used on the **command line** as well as a **library**\n* Based on the awesome `esprima` parser and the equally awesome `escodegen` code generator\n* Well-tested on node 0.4.x, 0.6.x, 0.8.x and the browser (instrumentation library only)\n\nInstalling\n----------\n\n    $ npm install -g istanbul\n\nGetting started\n---------------\n\nThe best way to see it in action is to run node unit tests. Say you have a test\nscript `test.js` that runs all tests for your node project without coverage.\n\nSimply:\n\n    $ cd /path/to/your/source/root\n    $ istanbul cover test.js\n\nand this should produce a `coverage.json`, `lcov.info` and `lcov-report/*html` under `./coverage`\n\nSample of code coverage reports produced by this tool (for this tool!):\n\n* [HTML reports](http://gotwarlost.github.com/istanbul/public/coverage/lcov-report/index.html)\n* [Standard LCOV reports](http://gotwarlost.github.com/istanbul/public/coverage/std-lcov/index.html) (using `genhtml` on the lcov trace file)\n\nUse cases\n---------\n\nSupports the following use cases and more\n\n* transparent coverage of nodejs unit tests\n* ability to use in an <code>npm test</code> script for conditional coverage\n* instrumentation of files in batch mode for browser tests (using yeti for example)\n* Server side code coverage for nodejs by embedding it as custom middleware\n\n\nIgnoring code for coverage\n--------------------------\n\n* Skip an `if` or `else` path with `/* istanbul ignore if */` or `/* istanbul ignore else */` respectively.\n* For all other cases, skip the next 'thing' in the source with: `/* istanbul ignore next */`\n\nSee [ignoring-code-for-coverage.md](ignoring-code-for-coverage.md) for the spec.\n\nThe command line\n----------------\n\n    $ istanbul help\n\ngives you detailed help on all commands.\n\nUsage: istanbul help <command>\n\nAvailable commands are:\n\n      check-coverage\n              checks overall coverage against thresholds from coverage JSON\n              files. Exits 1 if thresholds are not met, 0 otherwise\n\n\n      cover   transparently adds coverage information to a node command. Saves\n              coverage.json and reports at the end of execution\n\n\n      help    shows help\n\n\n      instrument\n              instruments a file or a directory tree and writes the\n              instrumented code to the desired output location\n\n\n      report  writes reports for coverage JSON objects produced in a previous\n              run\n\n\n      test    cover a node command only when npm_config_coverage is set. Use in\n              an `npm test` script for conditional coverage\n\n\nCommand names can be abbreviated as long as the abbreviation is unambiguous\n\nThe `cover` command\n-------------------\n\n    $ istanbul cover my-test-script.js -- my test args\n    # note the -- between the command name and the arguments to be passed\n\nThe `cover` command can be used to get a coverage object and reports for any arbitrary\nnode script. By default, coverage information is written under `./coverage` - this\ncan be changed using command-line options.\n\nThe `cover` command can also be passed an optional `--handle-sigint` flag to enable writing reports when a user triggers a manual SIGINT of the process that is being covered. This can be useful when you are generating coverage for a long lived process.\n\nThe `test` command\n-------------------\n\nThe `test` command has almost the same behavior as the `cover` command, except that\nit skips coverage unless the `npm_config_coverage` environment variable is set.\n\nThis helps you set up conditional coverage for tests. In this case you would\nhave a `package.json` that looks as follows.\n\n    {\n        \"name\": \"my-awesome-lib\",\n        \"version\": \"1.0\",\n        \"script\": {\n            \"test\": \"istanbul test my-test-file.js\"\n        }\n    }\n\nThen:\n\n    $ npm test # will run tests without coverage\n\nAnd:\n\n    $ npm test --coverage # will run tests with coverage\n\n**Note**: This needs `node 0.6` or better to work. `npm` for `node 0.4.x` does\nnot support the `--coverage` flag.\n\nThe `instrument` command\n------------------------\n\nInstruments a single JS file or an entire directory tree and produces an output directory tree with instrumented code. This should not be required for running node unit tests but is useful for tests to be run on the browser (using `yeti` for example).\n\nThe `report` command\n-------------------\n\nWrites reports using `coverage*.json` files as the source of coverage information. Reports are available in the following formats:\n\n* html - produces a bunch of HTML files with annotated source code\n* lcovonly - produces an lcov.info file\n* lcov - produces html + lcov files. This is the default format\n* cobertura - produces a cobertura-coverage.xml file for easy Hudson integration\n* text-summary - produces a compact text summary of coverage, typically to console\n* text - produces a detailed text table with coverage for all files\n* teamcity - produces service messages to report code coverage to TeamCity\n* clover - produces a clover.xml file to integrate with Atlassian Clover\n\nAdditional report formats may be plugged in at the library level.\n\nThe `check-coverage` command\n----------------------------\n\nChecks the coverage of statements, functions, branches, and lines against the\nprovided thresholds. Postive thresholds are taken to be the minimum percentage\nrequired and negative numbers are taken to be the number of uncovered entities\nallowed.\n\nLibrary usage\n-------------\n\nAll the features of istanbul can be accessed as a library using its [public API](http://gotwarlost.github.com/istanbul/public/apidocs/index.html)\n\nChangelog\n---------\n\nChangelog has been moved [here](https://github.com/gotwarlost/istanbul/blob/master/CHANGELOG.md).\n\nLicense\n-------\n\nistanbul is licensed under the [BSD License](http://github.com/gotwarlost/istanbul/raw/master/LICENSE).\n\nThird-party libraries\n---------------------\n\nThe following third-party libraries are used by this module:\n\n* abbrev: https://github.com/isaacs/abbrev-js -  to handle command abbreviations\n* async: https://github.com/caolan/async - for parallel instrumentation of files\n* escodegen: https://github.com/Constellation/escodegen - for JS code generation\n* esprima: https://github.com/ariya/esprima - for JS parsing\n* fileset: https://github.com/mklabs/node-fileset - for loading and matching path expressions\n* handlebars: https://github.com/wycats/handlebars.js/ - for report template expansion\n* js-yaml: https://github.com/nodeca/js-yaml - for YAML config file load\n* mkdirp: https://github.com/substack/node-mkdirp - to create output directories\n* nodeunit: https://github.com/caolan/nodeunit - dev dependency for unit tests\n* nopt: https://github.com/isaacs/nopt - for option parsing\n* resolve: https://github.com/substack/node-resolve - for resolving a post-require hook module name into its main file.\n* rimraf - https://github.com/isaacs/rimraf - dev dependency for unit tests\n* which: https://github.com/isaacs/node-which - to resolve a node command to a file for the `cover` command\n* wordwrap: https://github.com/substack/node-wordwrap - for prettier help\n* prettify: http://code.google.com/p/google-code-prettify/ - for syntax colored HTML reports. Files checked in under `lib/vendor/`\n\nInspired by\n-----------\n\n* YUI test coverage - https://github.com/yui/yuitest - the grand-daddy of JS coverage tools. Istanbul has been specifically designed to offer an alternative to this library with an easy migration path.\n* cover: https://github.com/itay/node-cover - the inspiration for the `cover` command, modeled after the `run` command in that tool. The coverage methodology used by istanbul is quite different, however\n\nShout out to\n------------\n\n   * [mfncooper](https://github.com/mfncooper) - for great brainstorming discussions\n   * [reid](https://github.com/reid), [davglass](https://github.com/davglass), the YUI dudes, for interesting conversations, encouragement, support and gentle pressure to get it done :)\n\nWhy the funky name?\n-------------------\n\nSince all the good ones are taken. Comes from the loose association of ideas across coverage, carpet-area coverage, the country that makes good carpets and so on...\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/gotwarlost/istanbul/issues"
  },
  "homepage": "https://github.com/gotwarlost/istanbul",
  "_id": "istanbul@0.2.16",
  "_shasum": "870545a0d4f4b4ce161039e9e805a98c2c700bd9",
  "_from": "istanbul@~0.2.1",
  "_resolved": "https://registry.npmjs.org/istanbul/-/istanbul-0.2.16.tgz"
}
