{
  "name": "fell",
  "version": "0.0.1",
  "description": "A javascript logging framework.",
  "homepage": "http://BladeRunnerJS.github.io/fell",
  "license": "MIT",
  "dependencies": {
    "emitter": "git+https://github.com/BladeRunnerJS/emitter.git#gh-pages"
  },
  "devDependencies": {
    "jsdoc3": "git://github.com/jsdoc3/jsdoc.git",
    "jshamcrest": "0.7.x",
    "jasmine-node": "1.11.x",
    "fs-extra": "~0.6.3"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/BladeRunnerJS/fell.git"
  },
  "main": "./lib/fell.js",
  "scripts": {
    "test": "jasmine-node --verbose spec",
    "doc": "jsdoc lib -d doc",
    "prepublish": "node build/package.js"
  },
  "readme": "---\r\nlayout: main\r\npermalink: /index.html\r\ntitle: fell logging\r\n---\r\n\r\n<script type=\"text/javascript\" src=\"node_modules/emitter/lib/Emitter.js\"></script>\r\n<script type=\"text/javascript\" src=\"http://BladeRunnerJS.github.io/emitter/lib/Emitter.js\"></script>\r\n\r\n<script type=\"text/javascript\" src=\"target/single/fell.js\"></script>\r\n\r\nfell\r\n====\r\n\r\nA logging library that works in node and the browser.\r\n\r\n* This document is available nicely formatted [here](http://BladeRunnerJS.github.io/fell).\r\n* Tests are [here](http://BladeRunnerJS.github.io/fell/spec).\r\n* Source code is [here](https://github.com/BladeRunnerJS/fell).\r\n* JSDoc is [here](http://BladeRunnerJS.github.io/fell/doc) (still a work in progress).\r\n\r\nThe rendered form of this document includes the fell script so you can open\r\na console and try it immediately.\r\n\r\nAims\r\n----\r\n\r\n* Very low cost when logging at a level not in use.\r\n* Friendly to unit testing.\r\n* Allows you to log at different levels from within different pieces of code.\r\n* Quick and easy to get started with.\r\n* Works in both node.js and the browser.\r\n\r\nUsage\r\n-----\r\n\r\nIn a web browser, you'll want to include the js file <a href=\"target\\single\\fell.js\">fell.js</a>.\r\nYou'll also need the Emitter dependency which is available from [here](http://BladeRunnerJS.github.io/Emitter).\r\n\r\nThe following lines will pull the libraries from github. For a proper deployment, you should\r\ndownload them or check them out of github.\r\n\r\n```\r\n   <script type=\"text/javascript\" src=\"http://BladeRunnerJS.github.io/emitter/lib/Emitter.js\"></script>\r\n   <script type=\"text/javascript\" src=\"http://BladeRunnerJS.github.io/fell/target/single/fell.js\"></script>\r\n```\r\n\r\nIn node, add fell to your package.json dependencies:\r\n\r\n    npm install --save fell@git+https://github.com/BladeRunnerJS/fell.git#gh-pages\r\n\r\n\r\n###  Getting the Log object.\r\n\r\nStart by getting the Log object.\r\n\r\n```javascript\r\n\r\n    // In the browser\r\n    var Log = fell.Log;\r\n\r\n    // In node\r\n    var Log = require('fell').Log;\r\n\r\n    // Either:\r\n    var Log = typeof fell !== 'undefined' ? fell.Log : require('fell').Log;\r\n```\r\n\r\n### The Default Logger\r\n\r\nThe default configuration has it outputting to the console (if one is available), so you can start\r\nusing it immediately:\r\n\r\n```javascript\r\n\r\n   Log.info(\"Log messages by default have {0} replaced {1}.\",\r\n               \"numbers surrounded by curly braces\",\r\n               \"by their arguments\");\r\n   Log.warn(\"The levels supported are fatal, error, warn, info and debug\");\r\n```\r\n\r\n### Specific Loggers\r\n\r\nYou can get more finely grained control if you log to specified loggers within your modules or\r\nclasses.\r\n\r\n```javascript\r\n\r\n   function MyClass() {\r\n       this.log = Log.getLogger('mymodule.MyClass');\r\n   }\r\n\r\n   MyClass.prototype.doAThing = function() {\r\n       this.log.warn(\"The thing that MyClass does is potentially dangerous!\");\r\n   };\r\n\r\n   var myObj = new MyClass();\r\n   myObj.doAThing();\r\n```\r\n\r\n### Configuration\r\n\r\nTo take advantage of this control, you can configure particular loggers to log at particular levels.\r\n\r\n```javascript\r\n\r\n    Log.configure('error', {\r\n        'mymodule': 'info',\r\n        'mymodule.some.hierarchy': 'fatal'\r\n    });\r\n```\r\n\r\nYou can set up your logging by calling configure at the start of your program.  It takes up to three\r\narguments.  The first argument is the default log level that will be done for all loggers that don't\r\nhave more specific configuration.\r\n\r\nThe second argument is a map containing logger names to the levels that they should log at.  This\r\nis interpreted hierarchically, so in the above example the logger `mymodule.MyClass` will log at\r\nlevel `info`, since it matches the `mymodule` configuration.  The logger `mymodule.some.hierarchy`\r\nwill log at level `fatal`, as will any loggers with names that start `mymodule.some.hierarchy.`.\r\n\r\nThe third argument is an array of destinations that log events should be routed too.  If you don't\r\npass anything (as in the above example), this will default to an array containing only a logger that\r\noutputs to the console object in environments that support this.\r\n\r\nCalling `Log.configure` clears the state of the logger, so the levels, configuration and log\r\ndestinations are all reset.\r\n\r\nIf you want to modify the logging while in use you can use methods specifically for that:\r\n\r\n```javascript\r\n\r\n    // Changes the log level for things not configured specifically.\r\n    Log.changeLevel('error');\r\n\r\n    // Changes the log level for mymodule.MyClass and things below it.\r\n    Log.changeLevel('mymodule.MyClass', 'warn');\r\n\r\n    // Adds a new destination that stores the most recent 10 log events.\r\n    var store = new fell.destination.LogStore(10);\r\n    Log.addDestination(store);\r\n\r\n    // Removes the previously added destination.\r\n    Log.removeDestination(store);\r\n```\r\n\r\nTesting\r\n-------\r\n\r\nCare must be taken when testing for log messages in order to avoid writing fragile tests.\r\n\r\nIn order to help with this, the provided LogStore destination detects when it's loaded with [JsHamcrest](http://danielfm.github.io/jshamcrest)\r\nintegrated, and provides a number of jshamcrest matchers to be used when unit testing.\r\n\r\nHere's an example of usage:\r\n\r\n```javascript\r\n\r\n    // code under test\r\n    var Log = typeof fell !== 'undefined' ? fell.Log : require('fell').Log;\r\n\r\n    function MyObject(parameter) {\r\n    \tthis.log = Log.getLogger('mymodule.MyObject');\r\n\r\n    \tthis.info(MyObject.LOG_MESSAGES['initialising'], MyObject.version, parameter);\r\n    }\r\n\r\n    MyObject.LOG_MESSAGES = {\r\n    \t'initialising': 'Initialising MyObject, version {0}, with parameter {1}.'\r\n    }\r\n\r\n    MyObject.version = \"1.2.3\";\r\n\r\n\r\n\r\n    // test code\r\n\r\n    // Note:  This will only work if JsHamcrest.Integration.jasmine() was run\r\n    // sometime before the LogStore was defined.\r\n\r\n    describe('My object', function() {\r\n    \tvar Log = fell.Log;\r\n    \tvar LogStore = fell.destination.LogStore;\r\n\r\n    \tvar store;\r\n\r\n    \tbeforeEach(function() {\r\n    \t\tstore = new LogStore();\r\n    \t\tLog.configure(\"info\", {}, [store]);\r\n    \t});\r\n\r\n    \tit('when constructed, logs at info with its version and the parameter.', function() {\r\n    \t\tvar myObj = new MyObject(23);\r\n\r\n    \t\tassertThat(store, LogStore.contains(\r\n    \t\t\t\tLogStore.event(\r\n    \t\t\t\t\t'info',\r\n    \t\t\t\t\t'mymodule.MyObject',\r\n    \t\t\t\t\t[MyObject.LOG_MESSAGES['initialising'], MyObject.version, 23]\r\n    \t\t\t\t)\r\n    \t\t\t)\r\n    \t\t);\r\n\r\n    \t\t// or if the only thing we really care about is that the parameter\r\n    \t\t// is in the log message:\r\n\r\n    \t\tassertThat(store, LogStore.contains(\r\n    \t\t\t\tLogStore.event(\r\n    \t\t\t\t\tanything(), anything(), hasItem(23)\r\n    \t\t\t\t)\r\n    \t\t\t)\r\n    \t\t);\r\n\r\n    \t}\r\n```\r\n\r\nThe provided matchers, `LogStore.contains`, `LogStore.containsAll` and `LogStore.event` also accept\r\nJsHamcrest matchers as arguments.  You can make your tests less brittle by accepting anything that\r\nmakes sense for the code to do.  So if your code currently logs at 'debug', but it would also make\r\nsense for it to log the same message at 'info', check against `either('debug').or('info')` rather\r\nthan checking against what your code actually does.\r\n\r\nThere is no matcher to check that no other log messages have been logged, since this is a test\r\nantipattern - future code changes may add more log messages, causing your tests to break even\r\nwhen there is no bug.\r\n\r\nIn the above example, I store the actual text of the log message in a staticly referenced map with\r\nthe code under test, and check against that rather than a hardcoded string.  This way, the text of\r\nthe message can be changed easily without breaking the tests.\r\n\r\nThe fell logger by default uses a string interpolation function so that the parts of the message\r\nthat change do not break the message matching and so that they can be compared separately.\r\n\r\nFell matchers don't require you to test every log message. This is desirable, as many log messages\r\ndon't form part of your public interface, and testing them would increase the frailty of the tests\r\nwithout providing any benefit.",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/BladeRunnerJS/fell/issues"
  },
  "_id": "fell@0.0.1",
  "dist": {
    "shasum": "fa664a6a9c7363d4020bcec092555b367bd65c8f"
  },
  "_resolved": "git+https://github.com/BladeRunnerJS/fell.git#ec3a739e7ebf9f61be1364f4a27c7ea8679029f6",
  "_from": "fell@git+https://github.com/BladeRunnerJS/fell.git#gh-pages"
}
