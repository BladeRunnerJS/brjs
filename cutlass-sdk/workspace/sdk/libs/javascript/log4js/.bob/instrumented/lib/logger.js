/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['logger.js']) {
  _$jscoverage['logger.js'] = [];
  _$jscoverage['logger.js'][1] = 0;
  _$jscoverage['logger.js'][2] = 0;
  _$jscoverage['logger.js'][16] = 0;
  _$jscoverage['logger.js'][17] = 0;
  _$jscoverage['logger.js'][18] = 0;
  _$jscoverage['logger.js'][19] = 0;
  _$jscoverage['logger.js'][20] = 0;
  _$jscoverage['logger.js'][21] = 0;
  _$jscoverage['logger.js'][31] = 0;
  _$jscoverage['logger.js'][32] = 0;
  _$jscoverage['logger.js'][34] = 0;
  _$jscoverage['logger.js'][35] = 0;
  _$jscoverage['logger.js'][38] = 0;
  _$jscoverage['logger.js'][39] = 0;
  _$jscoverage['logger.js'][40] = 0;
  _$jscoverage['logger.js'][42] = 0;
  _$jscoverage['logger.js'][43] = 0;
  _$jscoverage['logger.js'][46] = 0;
  _$jscoverage['logger.js'][47] = 0;
  _$jscoverage['logger.js'][50] = 0;
  _$jscoverage['logger.js'][51] = 0;
  _$jscoverage['logger.js'][54] = 0;
  _$jscoverage['logger.js'][57] = 0;
  _$jscoverage['logger.js'][58] = 0;
  _$jscoverage['logger.js'][61] = 0;
  _$jscoverage['logger.js'][63] = 0;
  _$jscoverage['logger.js'][64] = 0;
  _$jscoverage['logger.js'][65] = 0;
  _$jscoverage['logger.js'][68] = 0;
  _$jscoverage['logger.js'][69] = 0;
  _$jscoverage['logger.js'][70] = 0;
  _$jscoverage['logger.js'][71] = 0;
  _$jscoverage['logger.js'][72] = 0;
  _$jscoverage['logger.js'][79] = 0;
  _$jscoverage['logger.js'][80] = 0;
}
_$jscoverage['logger.js'][1]++;
"use strict";
_$jscoverage['logger.js'][2]++;
var levels = require("./levels"), util = require("util"), events = require("events"), DEFAULT_CATEGORY = "[default]";
_$jscoverage['logger.js'][16]++;
function LoggingEvent(categoryName, level, data, logger) {
  _$jscoverage['logger.js'][17]++;
  this.startTime = new Date();
  _$jscoverage['logger.js'][18]++;
  this.categoryName = categoryName;
  _$jscoverage['logger.js'][19]++;
  this.data = data;
  _$jscoverage['logger.js'][20]++;
  this.level = level;
  _$jscoverage['logger.js'][21]++;
  this.logger = logger;
}
_$jscoverage['logger.js'][31]++;
function Logger(name, level) {
  _$jscoverage['logger.js'][32]++;
  this.category = name || DEFAULT_CATEGORY;
  _$jscoverage['logger.js'][34]++;
  if (level) {
    _$jscoverage['logger.js'][35]++;
    this.setLevel(level);
  }
}
_$jscoverage['logger.js'][38]++;
util.inherits(Logger, events.EventEmitter);
_$jscoverage['logger.js'][39]++;
Logger.DEFAULT_CATEGORY = DEFAULT_CATEGORY;
_$jscoverage['logger.js'][40]++;
Logger.prototype.level = levels.TRACE;
_$jscoverage['logger.js'][42]++;
Logger.prototype.setLevel = (function (level) {
  _$jscoverage['logger.js'][43]++;
  this.level = levels.toLevel(level, this.level || levels.TRACE);
});
_$jscoverage['logger.js'][46]++;
Logger.prototype.removeLevel = (function () {
  _$jscoverage['logger.js'][47]++;
  delete this.level;
});
_$jscoverage['logger.js'][50]++;
Logger.prototype.log = (function () {
  _$jscoverage['logger.js'][51]++;
  var args = Array.prototype.slice.call(arguments), logLevel = args.shift(), loggingEvent = new LoggingEvent(this.category, logLevel, args, this);
  _$jscoverage['logger.js'][54]++;
  this.emit("log", loggingEvent);
});
_$jscoverage['logger.js'][57]++;
Logger.prototype.isLevelEnabled = (function (otherLevel) {
  _$jscoverage['logger.js'][58]++;
  return this.level.isLessThanOrEqualTo(otherLevel);
});
_$jscoverage['logger.js'][61]++;
["Trace", "Debug", "Info", "Warn", "Error", "Fatal"].forEach((function (levelString) {
  _$jscoverage['logger.js'][63]++;
  var level = levels.toLevel(levelString);
  _$jscoverage['logger.js'][64]++;
  Logger.prototype["is" + levelString + "Enabled"] = (function () {
  _$jscoverage['logger.js'][65]++;
  return this.isLevelEnabled(level);
});
  _$jscoverage['logger.js'][68]++;
  Logger.prototype[levelString.toLowerCase()] = (function () {
  _$jscoverage['logger.js'][69]++;
  if (this.isLevelEnabled(level)) {
    _$jscoverage['logger.js'][70]++;
    var args = Array.prototype.slice.call(arguments);
    _$jscoverage['logger.js'][71]++;
    args.unshift(level);
    _$jscoverage['logger.js'][72]++;
    Logger.prototype.log.apply(this, args);
  }
});
}));
_$jscoverage['logger.js'][79]++;
exports.LoggingEvent = LoggingEvent;
_$jscoverage['logger.js'][80]++;
exports.Logger = Logger;
_$jscoverage['logger.js'].source = ["\"use strict\";","var levels = require('./levels')",", util = require('util')",", events = require('events')",", DEFAULT_CATEGORY = '[default]';","","/**"," * Models a logging event."," * @constructor"," * @param {String} categoryName name of category"," * @param {Log4js.Level} level level of message"," * @param {Array} data objects to log"," * @param {Log4js.Logger} logger the associated logger"," * @author Seth Chisamore"," */","function LoggingEvent (categoryName, level, data, logger) {","  this.startTime = new Date();","  this.categoryName = categoryName;","  this.data = data;","  this.level = level;","  this.logger = logger;","}","","/**"," * Logger to log messages."," * use {@see Log4js#getLogger(String)} to get an instance."," * @constructor"," * @param name name of category to log to"," * @author Stephan Strittmatter"," */","function Logger (name, level) {","  this.category = name || DEFAULT_CATEGORY;","  ","  if (level) {","    this.setLevel(level);","  }","}","util.inherits(Logger, events.EventEmitter);","Logger.DEFAULT_CATEGORY = DEFAULT_CATEGORY;","Logger.prototype.level = levels.TRACE;","","Logger.prototype.setLevel = function(level) {","  this.level = levels.toLevel(level, this.level || levels.TRACE);","};","","Logger.prototype.removeLevel = function() {","  delete this.level;","};","","Logger.prototype.log = function() {","  var args = Array.prototype.slice.call(arguments)","  , logLevel = args.shift()","  , loggingEvent = new LoggingEvent(this.category, logLevel, args, this);","  this.emit(\"log\", loggingEvent);","};","","Logger.prototype.isLevelEnabled = function(otherLevel) {","  return this.level.isLessThanOrEqualTo(otherLevel);","};","","['Trace','Debug','Info','Warn','Error','Fatal'].forEach(","  function(levelString) {","    var level = levels.toLevel(levelString);","    Logger.prototype['is'+levelString+'Enabled'] = function() {","      return this.isLevelEnabled(level);","    };","    ","    Logger.prototype[levelString.toLowerCase()] = function () {","      if (this.isLevelEnabled(level)) {","        var args = Array.prototype.slice.call(arguments);","        args.unshift(level);","        Logger.prototype.log.apply(this, args);","      }","    };","  }",");","","","exports.LoggingEvent = LoggingEvent;","exports.Logger = Logger;"];
