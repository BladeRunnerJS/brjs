import org.ho.yaml.Yaml
import org.apache.tools.ant.filters.*;

apply plugin: 'maven'

ext {
	versionCalculator = new org.bladerunnerjs.BuildVersionCalculator(project)	
}

configurations { 
	system
	systemApp {
		exclude module: 'jetty-all-server'
	}
	application
	jsLibsAndDocs
	testRunner
	ct3Zip
	bladerunnerZip
	deployerJars
} 

dependencies {
	system project(path: ':cutlass-tasks')
	system project(path: ':brjs-runner')
	system project(path: ':brjs-logger')
	system project(":brjs-logger-binding")
	system dependency('selenium-java')
	
	systemApp (project(path: ':system-app-servlets'))
	
	application project(path: ':bladerunner-dev-servlets')
	application project(path: ':bladerunner-common-servlets')
	application project(path: ':bladerunner-prod-servlets')
	application dependency('h2')
	application dependency('javassist')
	application dependency('jsp-2.1-glassfish')
	
	jsLibsAndDocs project(path: ':cutlass-libraries', configuration: 'libsAndDocsZip')

	testRunner dependency('JsTestDriver')
	// Note: don't try to add support for transitive dependencies here as it will just fail
	testRunner project(path: ':js-test-driver-bundler-plugin', transitive : false)
	testRunner project(path: ':brjs-logger')
	testRunner files('JsTestDriver.conf')

	deployerJars dependency('wagon-http')
}

buildscript {
	dependencies {
		classpath dependency('junit')
		classpath dependency('commons-io')
		classpath dependency('jyaml')
	}
}

task copySystemFiles(type: Copy, dependsOn: configurations.system) {
	from configurations.system
	into file("sdk/libs/java/system")
	doFirst {
		delete file("sdk/libs/java/system")
	}
}

task copyApplicationFiles(type: Copy, dependsOn: configurations.application) {
	from configurations.application
	into file("sdk/libs/java/application")
	rename '(.*)', 'caplin-$0'
	exclude '*xom-*.jar'
	doFirst {
		delete file("sdk/libs/java/application")
	}
}

task copySystemApplicationLibs(type:Copy, dependsOn:[configurations.application,configurations.systemApp]) {
	destinationDir file("sdk/system-applications")
	file("sdk/system-applications").listFiles().each {
		if (it.isDirectory()) {
			into ("${it.name}/WEB-INF/lib") {
				from configurations.application + configurations.systemApp				
				rename '(.*)', 'caplin-$0'
				exclude '*xom-*.jar'
			}
		}
	}
	doFirst {
		fileTree(dir:"sdk/system-applications", include:"*/WEB-INF/lib/caplin-*").each { delete it }
	}
	doLast {
		//TODO: find a better way to do this so we dont copy files and then immediately delete them
		fileTree(dir:"sdk/system-applications/dashboard-services/WEB-INF/lib", include:"caplin-*", exclude:"*system-app-servlets*").each { delete it }
	}
}

task copyTestRunnerJars(type:Copy, dependsOn: configurations.testRunner) {
	from configurations.testRunner
	into file("sdk/libs/java/testRunner")
	rename 'js-test-driver-bundler-plugin-.*', 'js-test-driver-bundler-plugin.jar'
	doFirst {
		delete file("sdk/libs/java/testRunner")
	}
}

task copyJsLibsAndDocs(type: Copy, dependsOn: configurations.jsLibsAndDocs) {
	from { configurations.jsLibsAndDocs.collect { it.isDirectory() ? it : zipTree(it) } }
	into file("sdk")
	doFirst {
		delete 'sdk/docs/jsdoc'
		delete 'sdk/libs/javascript'
	}
}


task copySdkIncludes(type: Copy) {
	from "sdk-includes"
	into file("sdk")
	doFirst {
		delete fileTree(dir:"sdk",include:"*", exclude:".p4ignore")
	}
	doLast {
		ant {
			fixcrlf(srcdir:"sdk", includes:"bladerunner", eol:"lf" )
			fixcrlf(srcdir:"sdk", includes:"bladerunner.cmd", eol:"crlf" )
		}
	}
}

task copyTestRunnerConf, type:Copy, {
	from file("../conf")
	into file("conf")
	include "test-runner.conf"
	doLast {
		def confFile = file("conf/test-runner.conf")
		confFile.text = "## WARNING: do not change this file. The original lives in <branch-dir>/test-runner.conf ##\n\n" + confFile.text
	}
}

task jsTestDriverTests, type: com.caplin.gradle.tasks.RunJstdTests, {
	dependsOn = [ assemble, project.getParent().tasks['copyBrowsers'], copyTestRunnerConf ]
	inputs.dir file("apps/")
	inputs.dir file("sdk/")
	inputs.dir file("conf/")
	testDir = "system-applications"
}

task test(dependsOn:jsTestDriverTests) { }


task copyReleaseNote, type:Copy, {
	from "release-notes"
	into "sdk/docs/release-notes/"
	include "bladerunner-*.*"
	filter(ReplaceTokens, tokens: [
		minorVersion: versionCalculator.calculateMinorVersion(),
		majorVersion: versionCalculator.calculateMajorVersion(),
		buildDate: versionCalculator.calculateBuildDate(),
		productName: "BladeRunner"
	] )
	rename '([a-zA-Z0-9]+)-(.*)', '$2'
}

assemble {
	dependsOn = [copySystemFiles, copyApplicationFiles, copyJsLibsAndDocs, copySdkIncludes, copyTestRunnerJars, copyReleaseNote,
			copySystemApplicationLibs, copyTestRunnerConf]
}
task check, dependsOn: assemble, {}
task build, dependsOn: [assemble, check, test], {}


ext.explodedSdkDir = "${project.buildDir}/exploded"
ext.sdkDir = "BladeRunner/sdk"

task distZip, type:Zip, dependsOn: [assemble], {
	baseName = "BladeRunner"
	
	from (file("sdk")) {
		into "BladeRunner/sdk"
		exclude "version.txt"
		exclude "**/release-notes/*"
	}
	from (file("sdk")) {
		into "BladeRunner/sdk"
		include "version.txt"
		filter( ReplaceTokens, tokens: [ distType:"BladeRunner" ] )
		exclude "**/release-notes/*"
	}
	from (file("dist-includes")) {
		into "BladeRunner"
		include("*.html")
		include("*.txt")
		/* only copy the *html files here so we can filter them - copy the rest of the stuff in the next bit */
		filter(ReplaceTokens, tokens: [
			minorVersion: versionCalculator.calculateMinorVersion(), 
			majorVersion: versionCalculator.calculateMajorVersion(), 
			buildDate: versionCalculator.calculateBuildDate(), 
			productName: "BladeRunner" 
		])
	}
	from (file("dist-includes")) {
		into "BladeRunner"
		exclude("*.html")
		exclude("*.txt")
	}
	from (file("release-notes")) {
		into "BladeRunner/sdk/docs/release-notes"
		include "bladerunner-*.*"
		filter(ReplaceTokens, tokens: [
			minorVersion: versionCalculator.calculateMinorVersion(), 
			majorVersion: versionCalculator.calculateMajorVersion(), 
			buildDate: versionCalculator.calculateBuildDate(), 
			productName: "BladeRunner" 
		] )
		rename '([a-zA-Z0-9]+)-(.*)', '$2'
	}
	from (file("version.txt"))
	{
		into "BladeRunner/sdk"
	
    	def buildTimestamp = versionCalculator.calculateBuildTimestamp()
    	if (buildTimestamp != "") { inputs.property "timestamp" , buildTimestamp }
    	inputs.property "version" , versionCalculator.calculateVersion()
    	
    	filter( ReplaceTokens, tokens: [ sdkVersion:versionCalculator.calculateVersion(), buildDate:buildTimestamp, distType:"bladerunner" ] )
	}
	
	exclude "**/.p4ignore", "**/libs/**/tests/*", "**/system-applications/**/tests/*", "**/bundles/*"
}
build.dependsOn distZip


task explodeSdk, type:Sync, dependsOn: distZip, {
	from files(distZip).collect { zipTree(it) }
	into explodedSdkDir
}


task checkCopyrightStatements, dependsOn: explodeSdk, {
	doFirst {
		// TODO: Hardcoded reference to caplin's core library location, we should attempt to use the BRJS model for getting this location
		fileTree(dir:explodedSdkDir, include:"sdk/libs/javascript/caplin/src/**/*.js").each { file ->
			def fileText = file.text
			if (!fileText.contains("Copyright") || !fileText.contains("Caplin Systems Ltd")) {
				throw new GradleException("${file.path} does not contain copyright statement.")
			}
		}
	}
}
check.dependsOn checkCopyrightStatements


task checkVersionTxt, dependsOn: explodeSdk, {
	doFirst {
		def versionFile = project.file("${explodedSdkDir}/BladeRunner/sdk/version.txt");
		if (versionFile.text.contains("@"))
		{
			throw new GradleException("version.txt (${versionFile.getAbsolutePath()}) contains an unfiltered token.")
		}
	}
}
check.dependsOn checkVersionTxt
		

task checkReadme, dependsOn: explodeSdk, {
	doFirst {
		def readmeFile = project.file("${explodedSdkDir}/BladeRunner/README.txt");
		if (readmeFile.text.contains("@productName@"))
		{
			throw new GradleException("Readme at ${readmeFile.getAbsolutePath()} has not been correctly filtered.")
		}
		else if (!readmeFile.text.contains("Readme for BladeRunner"))
		{
			throw new GradleException("Readme at ${readmeFile.getAbsolutePath()} does not contain the product name.")
		}
	}
}
check.dependsOn checkReadme
		

task checkSdkStructure, type:com.caplin.gradle.tasks.CheckDirectoryStructure, dependsOn: explodeSdk, {
	checkRoot = file(explodedSdkDir)
	expectedPaths = [
		"*/sdk/**",
		"*/sdk/bladerunner",
		"*/sdk/bladerunner.cmd",
		"*/sdk/version.txt",
		"*/sdk/libs/java/testRunner/*",
		"*/sdk/libs/java/testRunner/js-test-driver-bundler-plugin.jar", /* make sure this isnt versioned */
		"*/sdk/libs/java/system/*",
		"*/sdk/libs/java/application/**",

		// TODO: Hardcoded reference to caplin's core library location, we should attempt to use the BRJS model for getting this location
		"*/sdk/libs/javascript/caplin/src/caplin/**",
		"*/sdk/libs/javascript/caplin/src/ct/**",
		"*/sdk/libs/javascript/caplin/resources/**/*",
		"*/sdk/libs/javascript/thirdparty/**/*",
		"*/sdk/system-applications/**/*",
		"*/sdk/system-applications/*/WEB-INF/lib/*",
		"*/sdk/templates/**/*",
		"*/sdk/templates/**/tests/**/*",
		"*/sdk/docs/jsdoc/index.html",
		"*/README.txt",
		"*/apps/apps.txt",
		"*/licenses/java.html",
		"*/licenses/javascript.html",
		"*/licenses/Third Party Legal Notice.pdf"
	]
	bannedPaths = [
	   "**/.p4ignore",
	   "**/empty.txt",
	   "**/system-applications/dashboard/WEB-INF/lib/*xom-*",
	   "**/libs/java/application/xom-*",
	   "**/libs/java/application/*bladerunner.jar",
	   "**/libs/java/application/servlet-api-*",
	   "**/libs/java/system/bladerunner-*-servlets*",
	   "**/js-test-driver/bundles/**/*",
	   "**/libs/**/tests/**/*",
	   "**/system-applications/**/tests/**/*",
	   "*/sdk/run*",	/* we dont want the scripts from cutlass-libraries included */
	]
	gradle.taskGraph.whenReady { graph ->
		if (graph.hasTask(':cutlass-libraries:buildJsDoc')) {
			bannedPaths += [ "*/sdk/docs/jsdoc/classesindex.html", "*/sdk/docs/jsdoc/static/*" ]
		}
	}
}
check.dependsOn checkSdkStructure


checkSdkStructure.enabled = false
// disabled until we add more JS libraries in and fix the paths

	
clean { 
	doFirst {
    	delete "apps"
    	delete "test-results"
    	delete "webcentric-db"
    	delete "test-results"
    	delete "sdk/templates"
    	delete "conf/test-runner.conf"
    	fileTree(dir:"sdk", exclude:["system-applications/*","**/*.p4ignore"]).each { delete it }
    	fileTree(dir:projectDir, include:"**/bundles/*.bundle").each { delete it }
    	fileTree(dir:"sdk/system-applications", include:"**/WEB-INF/lib/caplin-*.jar").each { delete it }
	}
}

uploadArchives {
	repositories.mavenDeployer {
		name = 'Artifactory-Deployer'
		configuration = configurations.deployerJars
		repository(url: "http://artifactory.caplin.com:8081/artifactory/caplin-ci/")
	}
	doLast {
		String gradleDir = getGradle().gradleUserHomeDir
		File cachesDir = new File(gradleDir, "caches")
		fileTree(dir: gradleDir, include:"artifacts-*/**/${group}").each {
			println "cleaning up ${it.path}"
			delete it;
		}
	}
}
