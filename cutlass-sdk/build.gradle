import org.ho.yaml.Yaml
import org.apache.tools.ant.filters.*

apply plugin: 'maven'

configurations { 
	system
	application
	systemApp {
		exclude module: 'jetty-all-server'
			extendsFrom application
	}
	jsLibsAndDocs
	testRunner
	ct3Zip
	bladerunnerZip
	deployerJars
} 

dependencies {
	system project(path: ':cutlass-tasks')
	system project(path: ':brjs-runner')
	system project(path: ':brjs-logger')
	system project(":brjs-logger-binding")
	system dependency('selenium-java')
	
	application project(path: ':bladerunner-dev-servlets')
	application project(path: ':bladerunner-common-servlets')
	application project(path: ':bladerunner-prod-servlets')
	application dependency('h2')
	application dependency('javassist')
	application dependency('jsp-2.1-glassfish')
	
	systemApp (project(path: ':system-app-servlets'))
	
//	jsLibsAndDocs project(path: ':cutlass-libraries', configuration: 'libsAndDocsZip')

	testRunner dependency('JsTestDriver')
	// Note: don't try to add support for transitive dependencies here as it will just fail
	testRunner project(path: ':js-test-driver-bundler-plugin', transitive : false)
	testRunner project(path: ':brjs-logger')
	testRunner files('build-resources/JsTestDriver.conf')

	deployerJars dependency('wagon-http')
}

buildscript {
	dependencies {
		classpath dependency('junit')
		classpath dependency('commons-io')
		classpath dependency('jyaml')
	}
}

task assembleSdk, type: Copy, dependsOn: [configurations.system, configurations.application, configurations.systemApp, configurations.testRunner], {
	def includesDir = "build-resources/includes"
	
	destinationDir projectDir
	
	from ("${includesDir}")
	{
		include "LICENSE"
		include "README.txt"
	}
	
	from ("${includesDir}/apps")
	{
		into "apps"
	}
	
	from ("${includesDir}/conf")
	{
		into "conf"
	}
	from ("../conf")
	{
		into "conf"
		include "test-runner.conf"
	}
	
	from ("${includesDir}/sdk") {
		into "sdk"
		exclude "release-notes/*"
		exclude "version.txt"
	}
	
	from ("${includesDir}/sdk") {
		into "sdk"
		include "release-notes/*"
		filter(ReplaceTokens, tokens: [
			buildVersion: buildVersion,
			buildDate: buildDate,
			productName: "BladeRunner"
		] )
		rename '([a-zA-Z0-9]+)-(.*)', '$2'
	}
	
	from ("${includesDir}/sdk") {
		into "sdk"
		include "version.txt"
		filter( ReplaceTokens, tokens: [
			sdkVersion:buildVersion,
			buildDate:buildDate,
			distType:"bladerunner",
			buildHostname:buildHostname
		] )
	}
	
	from (configurations.system)
	{
		into "sdk/libs/java/system"
	}
	from (configurations.application)
	{
		into "sdk/libs/java/application"
		rename { String fileName ->
    		if ( !fileName.startsWith("brjs-") )
    		{
    			fileName = "brjs-"+fileName
    		}
		}
		exclude '*xom-*.jar'
	}
	file("sdk/system-applications").listFiles().each {
		if (it.isDirectory()) {
			into ("sdk/${it.name}/WEB-INF/lib") {
				from configurations.systemApp
				rename { String fileName ->
					if ( !fileName.startsWith("brjs-") )
					{
						fileName = "brjs-"+fileName
					}
				}
				exclude '*xom-*.jar'
			}
		}
	}
	from (configurations.testRunner)
	{
		into "sdk/libs/java/testRunner"
		rename 'js-test-driver-bundler-plugin-.*', 'js-test-driver-bundler-plugin.jar'
		rename 'JsTestDriver-(.*).jar', 'JsTestDriver.jar'
	}
	
	from ("${includesDir}/licenses")
	{
		into "licenses"
	}
	
	
	doFirst {
		delete file("sdk/libs/java")
		fileTree(dir:"sdk/system-applications", include:"*/WEB-INF/lib/brjs-*").each { delete it }
	}
	doLast {
		//TODO: find a better way to do this so we dont copy files and then immediately delete them
		fileTree(dir:"sdk/system-applications/dashboard-services/WEB-INF/lib", include:"brjs-*", exclude:"*system-app-servlets*").each { delete it }
	}
	doLast {
		ant {
			fixcrlf(srcdir:"sdk", includes:"brjs", eol:"lf" )
			fixcrlf(srcdir:"sdk", includes:"brjs.cmd", eol:"crlf" )
		}
	}
}


def createTestTask = { taskName, taskTestDir, taskTestType, browser ->
	task taskName, type: com.caplin.gradle.tasks.RunJstdTests, {
		description = "Run ${testType} for ${testDir}"
		dependsOn = [assemble, project.parent.tasks['copyBrowsers']]
		inputs.dir file("apps/")
    	inputs.dir file("sdk/")
    	inputs.dir file("conf/")
		testType = taskTestType
		browsers = browser
		testDir = taskTestDir
		enabled = false //TODO: remove this once the presenter libs have been moved across
	}
}

createTestTask "testJsIE", "system-applications", "ALL", "ie"
createTestTask "testJsChrome", "system-applications", "ALL", "chrome"
createTestTask "testJsFirefox", "system-applications", "ALL", "firefox"

task test, dependsOn:[testJsChrome, testJsFirefox]
task testIE, dependsOn:testJsIE


assemble.dependsOn assembleSdk

task check, dependsOn: assemble, {}
task build, dependsOn: [assemble, check, test], {}


ext.explodedSdkDir = "${project.buildDir}/exploded"
ext.sdkDir = "BladeRunner/sdk"

task distZip, type:Zip, dependsOn: [assemble], {
	baseName = "BladeRunner"
	
	from (file("sdk")) {
		into "BladeRunner/sdk"
	}
	
	exclude "**/.gitignore", "**/.p4ignore", "**/libs/**/tests/*", "**/system-applications/**/tests/*", "**/bundles/*"
}
build.dependsOn distZip


task explodeSdk, type:Sync, dependsOn: distZip, {
	from files(distZip).collect { zipTree(it) }
	into explodedSdkDir
}


task checkCopyrightStatements, dependsOn: explodeSdk, {
	doFirst {
		// TODO: Hardcoded reference to caplin's core library location, we should attempt to use the BRJS model for getting this location
		fileTree(dir:explodedSdkDir, include:"sdk/libs/javascript/caplin/src/**/*.js").each { file ->
			def fileText = file.text
			if (!fileText.contains("Copyright") || !fileText.contains("Caplin Systems Ltd")) {
				throw new GradleException("${file.path} does not contain copyright statement.")
			}
		}
	}
}
check.dependsOn checkCopyrightStatements


task checkVersionTxt, dependsOn: explodeSdk, {
	doFirst {
		def versionFile = project.file("${explodedSdkDir}/BladeRunner/sdk/version.txt");
		if (versionFile.text.contains("@"))
		{
			throw new GradleException("version.txt (${versionFile.getAbsolutePath()}) contains an unfiltered token.")
		}
	}
}
check.dependsOn checkVersionTxt
		

task checkReadme, dependsOn: explodeSdk, {
	doFirst {
		def readmeFile = project.file("${explodedSdkDir}/BladeRunner/README.txt");
		if (readmeFile.text.contains("@productName@"))
		{
			throw new GradleException("Readme at ${readmeFile.getAbsolutePath()} has not been correctly filtered.")
		}
		else if (!readmeFile.text.contains("Readme for BladeRunner"))
		{
			throw new GradleException("Readme at ${readmeFile.getAbsolutePath()} does not contain the product name.")
		}
	}
}
check.dependsOn checkReadme
		

task checkSdkStructure, type:com.caplin.gradle.tasks.CheckDirectoryStructure, dependsOn: explodeSdk, {
	checkRoot = file(explodedSdkDir)
	expectedPaths = [
		"*/sdk/**",
		"*/sdk/bladerunner",
		"*/sdk/bladerunner.cmd",
		"*/sdk/version.txt",
		"*/sdk/libs/java/testRunner/*",
		"*/sdk/libs/java/testRunner/js-test-driver-bundler-plugin.jar", /* make sure this isnt versioned */
		"*/sdk/libs/java/system/*",
		"*/sdk/libs/java/application/**",

		// TODO: Hardcoded reference to caplin's core library location, we should attempt to use the BRJS model for getting this location
		"*/sdk/libs/javascript/caplin/src/caplin/**",
		"*/sdk/libs/javascript/caplin/src/ct/**",
		"*/sdk/libs/javascript/caplin/resources/**/*",
		"*/sdk/libs/javascript/thirdparty/**/*",
		"*/sdk/system-applications/**/*",
		"*/sdk/system-applications/*/WEB-INF/lib/*",
		"*/sdk/templates/**/*",
		"*/sdk/templates/**/tests/**/*",
		"*/sdk/docs/jsdoc/index.html",
		"*/README.txt",
		"*/apps/apps.txt",
		"*/licenses/java.html",
		"*/licenses/javascript.html",
		"*/licenses/Third Party Legal Notice.pdf"
	]
	bannedPaths = [
	   "**/.p4ignore",
	   "**/.gitignore",
	   "**/empty.txt",
	   "**/system-applications/dashboard/WEB-INF/lib/*xom-*",
	   "**/libs/java/application/xom-*",
	   "**/libs/java/application/*bladerunner.jar",
	   "**/libs/java/application/servlet-api-*",
	   "**/libs/java/system/bladerunner-*-servlets*",
	   "**/js-test-driver/bundles/**/*",
	   "**/libs/**/tests/**/*",
	   "**/system-applications/**/tests/**/*",
	   "*/sdk/run*",	/* we dont want the scripts from cutlass-libraries included */
	]
	gradle.taskGraph.whenReady { graph ->
		if (graph.hasTask(':cutlass-libraries:buildJsDoc')) {
			bannedPaths += [ "*/sdk/docs/jsdoc/classesindex.html", "*/sdk/docs/jsdoc/static/*" ]
		}
	}
}
check.dependsOn checkSdkStructure


checkSdkStructure.enabled = false
// disabled until we add more JS libraries in and fix the paths

	
clean { 
	doFirst {
    	delete "LICENSE"
    	delete "README.txt"
    	delete "apps"
    	delete "conf"
    	delete "licenses"
    	delete "test-results"
    	delete "webcentric-db"
    	delete "test-results"
    	delete "${projectDir.path}/conf/test-runner.conf"
    	fileTree(dir:"sdk", exclude:["system-applications/*","**/*.p4ignore", "**/*.gitignore", "libs/javascript"]).each { delete it }
    	fileTree(dir:projectDir, include:"**/bundles/*.bundle").each { delete it }
    	fileTree(dir:"sdk/system-applications", include:"**/WEB-INF/lib/brjs-*.jar").each { delete it }
	}
}

uploadArchives {
	repositories.mavenDeployer {
		name = 'Artifactory-Deployer'
		configuration = configurations.deployerJars
		repository(url: "http://artifactory.caplin.com:8081/artifactory/caplin-ci/")
	}
	doLast {
		String gradleDir = getGradle().gradleUserHomeDir
		File cachesDir = new File(gradleDir, "caches")
		fileTree(dir: gradleDir, include:"artifacts-*/**/${group}").each {
			println "cleaning up ${it.path}"
			delete it;
		}
	}
}
